from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from app.services.validators import is_admin
from app.keyboards.user import main_menu_kb
from app.keyboards.admin import admin_main_menu
from app.database.db import User, UserRole
from app.database.db import async_session_maker
from sqlalchemy import select
from datetime import datetime
from sqlalchemy.exc import IntegrityError
from app.keyboards.admin import super_admin_menu
import os
import logging

logger = logging.getLogger(__name__)

SUPER_ADMINS = list(map(int, os.getenv("SUPER_ADMINS", "").split(",")))

router = Router()

@router.message(CommandStart())
async def cmd_start(message: Message, session: AsyncSession):
    logger.info(f"User {message.from_user.id} triggered /start")
    try:
        user = await session.scalar(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        logger.debug(f"[DEBUG /start] User from DB: {user}")

        if not user:
            new_user = User(
                telegram_id=message.from_user.id,
                full_name=message.from_user.full_name,
                username=message.from_user.username if message.from_user.username else message.from_user.full_name,
                role=UserRole.SUPER_ADMIN if message.from_user.id in SUPER_ADMINS else UserRole.USER
            )
            session.add(new_user)
            await session.commit()
            logger.info(f"Created new user {message.from_user.id} ({new_user.role})")
            await message.answer("üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
        else:
            logger.info(f"Returning user {message.from_user.id}")
            await message.answer("üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!")
    except IntegrityError as e:
        logger.error(f"IntegrityError for user {message.from_user.id}: {e}", exc_info=True)
        await session.rollback()
        await message.answer("üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!")
    except Exception as e:
        logger.exception(f"Unexpected error in /start for user {message.from_user.id}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())

@router.message(Command("cancel"))
async def cancel_action(message: Message, state: FSMContext):
    logger.info(f"User {message.from_user.id} cancelled action")
    await state.clear()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

@router.message(Command("admin"))
async def cmd_admin(message: Message, session: AsyncSession):
    user = await session.scalar(
        select(User).where(User.telegram_id == message.from_user.id)
    )
    logger.info(f"User {message.from_user.id} requested admin panel")
    if not user:
        logger.warning(f"User {message.from_user.id} tried to access admin panel without registration")
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–∑–æ–≤–∏—Ç–µ /start")
        return

    if user.role == UserRole.SUPER_ADMIN:
        logger.info(f"User {message.from_user.id} opened super-admin panel")
        await message.answer("‚ö°Ô∏è –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=super_admin_menu())
    elif user.role == UserRole.ADMIN:
        logger.info(f"User {message.from_user.id} opened admin panel")
        await message.answer("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_main_menu())
    else:
        logger.warning(f"User {message.from_user.id} denied access to admin panel")
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")

@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def support_handler(message: Message):
    logger.info(f"User {message.from_user.id} requested support info")
    await message.answer(
        "üìå <b>–†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏</b>\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å:\n\n"
        "üîπ<b>–ü–æ –æ–±—â–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –æ —Ç—É—Ä–Ω–∏—Ä–µ:</b>\n"
        "@kkm1s, @BBNK_1\n\n"
        "üîπ<b>–ü–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º:</b>\n"
        "@Teriomate, @Manya169, @pelmeshka221",
        parse_mode="HTML"
    )