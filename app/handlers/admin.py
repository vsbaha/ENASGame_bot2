from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from datetime import datetime
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, delete
from app.database import crud
from app.services.validators import is_admin
from app.filters.admin import AdminFilter, SuperAdminFilter
from app.database.crud import add_to_blacklist, remove_from_blacklist
from aiogram.filters import StateFilter
from app.states import CreateTournament, Broadcast
from app.services.file_handling import save_file
from app.services.notifications import notify_super_admins
from app.filters.message_type_filter import MessageTypeFilter
import logging
import asyncio
import os
from app.database.db import Tournament, Game, TournamentStatus, UserRole, User, Tournament, GameFormat, Team, User, Player, TeamStatus, ProgressStatus
from app.keyboards.admin import (
    admin_main_menu,
    tournaments_management_kb,
    tournament_actions_kb,
    back_to_admin_kb,
    team_request_kb,
    tournament_status_kb,
    team_request_preview_kb,
    notifications_menu_kb,
    group_invite_kb,
    tournaments_btn_kb
)

router = Router()
logger = logging.getLogger(__name__)

# –ì–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω-–º–µ–Ω—é
@router.message(F.text == "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message):
    logger.info(f"User {message.from_user.id} opened admin panel")
    await message.answer("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_main_menu())
    
@router.callback_query(F.data == "stats")
async def show_stats(call: CallbackQuery, session: AsyncSession):
    logger.info(f"User {call.from_user.id} requested statistics")
    stats = await crud.get_statistics(session)
    text = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users']}\n"
        f"üèÜ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤: {stats['active_tournaments']}\n"
        f"üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: {stats['teams']}"
    )
    await call.message.edit_text(text, reply_markup=back_to_admin_kb())

@router.callback_query(F.data == "back_to_admin")
async def back_to_admin(call: CallbackQuery):
    logger.info(f"User {call.from_user.id} returned to admin panel")
    await call.message.edit_text("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_main_menu())

@router.callback_query(F.data == "manage_tournaments")
async def manage_tournaments(call: CallbackQuery, session: AsyncSession):
    logger.info(f"User {call.from_user.id} opened tournament management")
    user = await session.scalar(select(User).where(User.telegram_id == call.from_user.id))
    if user.role == UserRole.SUPER_ADMIN:
        tournaments = await session.scalars(select(Tournament))
    else:
        tournaments = await session.scalars(
            select(Tournament)
            .where(Tournament.status == TournamentStatus.APPROVED)
            .where(Tournament.created_by == user.id)
        )
    await call.message.edit_text(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏:",
        reply_markup=tournaments_management_kb(tournaments)
    )

@router.callback_query(F.data == "create_tournament")
async def start_creation(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    logger.info(f"User {call.from_user.id} started tournament creation")
    try:
        games = await session.scalars(select(Game))
        if not games:
            await call.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä! –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏–≥—Ä—ã.", show_alert=True)
            return
        builder = InlineKeyboardBuilder()
        for game in games:
            builder.button(
                text=game.name,
                callback_data=f"admin_select_game_{game.id}"
            )
        builder.adjust(1)
        await call.message.answer("üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=builder.as_markup())
        await state.set_state(CreateTournament.SELECT_GAME)
    except Exception as e:
        logger.error(f"Error in start_creation: {e}", exc_info=True)
        await call.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)

@router.callback_query(
    StateFilter(CreateTournament.SELECT_GAME),
    F.data.startswith("admin_select_game_")
)
async def select_game(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    game_id = int(call.data.split("_")[3])
    logger.info(f"User {call.from_user.id} selected game {game_id} for tournament creation")
    game = await session.get(Game, game_id)
    if not game:
        await call.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    formats = await session.scalars(select(GameFormat).where(GameFormat.game_id == game_id))
    formats = list(formats)
    if not formats:
        await call.answer("‚ùå –ù–µ—Ç —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã!", show_alert=True)
        return
    builder = InlineKeyboardBuilder()
    for fmt in formats:
        builder.button(
            text=f"{fmt.format_name} (–¥–æ {fmt.max_players_per_team})",
            callback_data=f"admin_select_format_{fmt.id}"
        )
    builder.adjust(1)
    await call.message.edit_text(
        f"üéÆ –ò–≥—Ä–∞: <b>{game.name}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:",
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )
    await state.update_data(game_id=game_id)
    await state.set_state(CreateTournament.SELECT_FORMAT)

@router.callback_query(F.data.startswith("admin_select_format_"))
async def select_format(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    format_id = int(call.data.split("_")[3])
    logger.info(f"User {call.from_user.id} selected format {format_id} for tournament creation")
    fmt = await session.get(GameFormat, format_id)
    if not fmt:
        await call.answer("‚ùå –§–æ—Ä–º–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    await state.update_data(format_id=format_id)
    await call.message.edit_text(
        f"–§–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–Ω: <b>{fmt.format_name}</b>\nüè∑ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:",
        parse_mode="HTML"
    )
    await state.set_state(CreateTournament.NAME)

@router.message(CreateTournament.NAME, MessageTypeFilter())
async def process_name(message: Message, state: FSMContext):
    if len(message.text) > 100:  # –ü—Ä–∏–º–µ—Ä –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏—è
        return await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
    logger.info(f"User {message.from_user.id} entered tournament name: {message.text}")
    await state.update_data(name=message.text)
    await message.answer("üåÑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ª–æ–≥–æ—Ç–∏–ø (—Ñ–æ—Ç–æ):")
    await state.set_state(CreateTournament.LOGO)

@router.message(CreateTournament.LOGO, MessageTypeFilter())
async def process_logo(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} uploaded tournament logo")
    file_id = message.photo[-1].file_id
    file_path = await save_file(bot, file_id, "tournaments/logos")
    await state.update_data(logo_path=file_path)
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú):")
    await state.set_state(CreateTournament.START_DATE)

@router.message(CreateTournament.START_DATE, MessageTypeFilter())
async def process_date(message: Message, state: FSMContext):
    try:
        date = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        if date < datetime.now():
            return await message.answer("‚ùå –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º.")
        logger.info(f"User {message.from_user.id} entered tournament start date: {message.text}")
        await state.update_data(start_date=date)
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        await state.set_state(CreateTournament.DESCRIPTION)
    except ValueError:
        logger.warning(f"User {message.from_user.id} entered invalid date: {message.text}")
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ü—Ä–∏–º–µ—Ä: 01.01.2025 14:00")

@router.message(CreateTournament.DESCRIPTION, MessageTypeFilter())
async def process_description(message: Message, state: FSMContext):
    if len(message.text) > 1000:  # –ü—Ä–∏–º–µ—Ä –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã –æ–ø–∏—Å–∞–Ω–∏—è
        return await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤.")
    logger.info(f"User {message.from_user.id} entered tournament description")
    await state.update_data(description=message.text)
    await message.answer("üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç (PDF):")
    await state.set_state(CreateTournament.REGULATIONS)

@router.message(CreateTournament.REGULATIONS)
async def finish_creation(message: Message, state: FSMContext, bot: Bot, session: AsyncSession):
    if not message.document:
        return await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç –≤ –≤–∏–¥–µ PDF-—Ñ–∞–π–ª–∞.")
    if message.document.mime_type != "application/pdf":
        logger.warning(f"User {message.from_user.id} tried to upload non-PDF as regulations")
        return await message.answer("‚ùå –¢–æ–ª—å–∫–æ PDF-—Ñ–∞–π–ª—ã!")
    if message.document.file_size > 10 * 1024 * 1024:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (10 –ú–ë)
        return await message.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä - 10 –ú–ë.")
    
    user = await session.scalar(select(User).where(User.telegram_id == message.from_user.id))
    if not user:
        logger.error(f"User {message.from_user.id} not found in DB during tournament creation")
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –í—ã–∑–æ–≤–∏—Ç–µ /start")
        await state.clear()
        return
    
    file_path = await save_file(bot, message.document.file_id, "tournaments/regulations")
    data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    required_fields = ['game_id', 'format_id', 'name', 'logo_path', 'start_date', 'description']
    if not all(field in data for field in required_fields):
        logger.error(f"Missing required fields for tournament creation: {data}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    status = TournamentStatus.APPROVED if user.role == UserRole.SUPER_ADMIN else TournamentStatus.PENDING
    
    tournament = Tournament(
        game_id=data['game_id'],
        format_id=data['format_id'],
        name=data['name'],
        logo_path=data['logo_path'],
        start_date=data['start_date'],
        description=data['description'],
        regulations_path=file_path,
        is_active=True,
        status=status,
        created_by=user.id
    )
    
    session.add(tournament)
    await session.commit()
    
    logger.info(f"Tournament '{data['name']}' created by user {message.from_user.id} (status: {status})")
    
    if status == TournamentStatus.PENDING:
        await notify_super_admins(
            bot=bot,
            text=f"–ù–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {data['name']}",
            session=session
        )
    
    await message.answer(
        f"‚úÖ –¢—É—Ä–Ω–∏—Ä <b>{data['name']}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!\n"
        f"–î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞: {data['start_date'].strftime('%d.%m.%Y %H:%M')}",
        parse_mode="HTML"
    )
    
    await state.clear()

    
@router.callback_query(F.data.startswith("edit_tournament_"))
async def show_tournament_details(call: CallbackQuery, session: AsyncSession):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—É—Ä–Ω–∏—Ä–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –æ–¥–æ–±—Ä–µ–Ω –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω)"""
    tournament_id = int(call.data.split("_")[2])
    tournament = await session.get(Tournament, tournament_id)
    user = await session.scalar(
        select(User).where(User.telegram_id == call.from_user.id)
    )

    if not tournament:
        await call.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    # –û–±—ã—á–Ω—ã–π –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã
    if user.role == UserRole.ADMIN and (
        tournament.status != TournamentStatus.APPROVED 
        or tournament.created_by != user.id
    ):
        await call.answer("üö´ –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—É—é –∏–≥—Ä—É
    game = await session.get(Game, tournament.game_id)

    # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø, –µ—Å–ª–∏ –µ—Å—Ç—å
    if tournament.logo_path and os.path.exists(tournament.logo_path):
        try:
            logo = FSInputFile(tournament.logo_path)
            await call.message.answer_photo(
                photo=logo,
                caption=f"üèÜ {tournament.name}"
            )
        except Exception:
            await call.message.answer("‚ö†Ô∏è –õ–æ–≥–æ—Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–≥–ª–∞–º–µ–Ω—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
    if tournament.regulations_path and os.path.exists(tournament.regulations_path):
        try:
            regulations = FSInputFile(tournament.regulations_path)
            await call.message.answer_document(
                document=regulations,
                caption="üìÑ –†–µ–≥–ª–∞–º–µ–Ω—Ç —Ç—É—Ä–Ω–∏—Ä–∞"
            )
        except Exception:
            await call.message.answer("‚ö†Ô∏è –†–µ–≥–ª–∞–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    # 3. –û–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏ ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–∫–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –≤–Ω–∏–∑—É)
    text = (
        f"üèÜ <b>{tournament.name}</b>\n\n"
        f"üéÆ –ò–≥—Ä–∞: {game.name if game else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"üïí –î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞: {tournament.start_date.strftime('%d.%m.%Y %H:%M')}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {tournament.description}\n"
        f"üîÑ –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω ‚úÖ' if tournament.is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω ‚ùå'}"
    )
    await call.message.answer(
        text,
        parse_mode="HTML",
        reply_markup=tournament_actions_kb(tournament_id, tournament.is_active)
    )
    
@router.callback_query(F.data.startswith("delete_tournament_"))
async def delete_tournament(call: CallbackQuery, session: AsyncSession):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ —Å —Ñ–∞–π–ª–∞–º–∏"""
    tournament_id = int(call.data.split("_")[2])
    tournament = await session.get(Tournament, tournament_id)
    
    if not tournament:
        await call.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
    import os
    if os.path.exists(tournament.logo_path):
        os.remove(tournament.logo_path)
    if os.path.exists(tournament.regulations_path):
        os.remove(tournament.regulations_path)
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
    await session.delete(tournament)
    await session.commit()
    
    await call.message.edit_text("‚úÖ –¢—É—Ä–Ω–∏—Ä –∏ –≤—Å–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")
    
@router.callback_query(F.data == "back_to_tournaments")
async def back_to_tournaments_list(call: CallbackQuery, session: AsyncSession):
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        await call.message.delete()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤
        tournaments = await session.scalars(select(Tournament))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
        await call.message.answer(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏:",
            reply_markup=tournaments_management_kb(tournaments)
        )
    except Exception as e:
        logging.error(f"Back error: {e}")
        await call.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞!")



@router.callback_query(F.data == "team_requests")
async def show_team_requests(call: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ"""
    user = await session.scalar(
        select(User).where(User.telegram_id == call.from_user.id)
    )
    
    if user.role != UserRole.SUPER_ADMIN:
        await call.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã
    tournaments = await session.scalars(select(Tournament))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
    requests = []
    for tournament in tournaments:
        teams = await tournament.teams  # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        for team in teams:
            if getattr(team, "status", None) == TeamStatus.PENDING:
                requests.append((tournament, team))
    
    if not requests:
        await call.answer("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–∞–º–∏
    for tournament, team in requests:
        creator = await session.get(User, tournament.created_by)
        await call.message.bot.send_message(
            creator.telegram_id,
            f"üìù –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ö–æ—á–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –≤–∞—à —Ç—É—Ä–Ω–∏—Ä: {tournament.name}\n"
            f"–ö–æ–º–∞–Ω–¥–∞: {team.team_name}\n",
            reply_markup=team_request_preview_kb(team.id)
        )
    
    await call.answer("üì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å–æ–∑–¥–∞—Ç–µ–ª—è–º —Ç—É—Ä–Ω–∏—Ä–æ–≤.")

@router.callback_query(F.data == "moderate_teams")
async def show_pending_teams(call: CallbackQuery, session: AsyncSession):
    """–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    # –î–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞ ‚Äî –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã, –¥–ª—è –∞–¥–º–∏–Ω–∞ ‚Äî —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Ç—É—Ä–Ω–∏—Ä—ã
    user = await session.scalar(select(User).where(User.telegram_id == call.from_user.id))
    if user.role == UserRole.SUPER_ADMIN:
        teams = await session.scalars(
            select(Team).where(Team.status == TeamStatus.PENDING)
        )
    else:
        # –¢–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —ç—Ç–∏–º –∞–¥–º–∏–Ω–æ–º
        tournaments = await session.scalars(
            select(Tournament.id).where(Tournament.created_by == user.id)
        )
        teams = await session.scalars(
            select(Team).where(
                Team.status == TeamStatus.PENDING,
                Team.tournament_id.in_(tournaments)
            )
        )
    teams = list(teams)
    if not teams:
        await call.message.edit_text("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö.", reply_markup=back_to_admin_kb())
        return

    builder = InlineKeyboardBuilder()
    for team in teams:
        builder.button(
            text=f"{team.team_name} (—Ç—É—Ä–Ω–∏—Ä ID: {team.tournament_id})",
            callback_data=f"moderate_team_{team.id}"
        )
    builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin"))
    await call.message.edit_text(
        "üìù –ó–∞—è–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("moderate_team_"))
async def moderate_team(call: CallbackQuery, session: AsyncSession):
    team_id = int(call.data.split("_")[2])
    team = await session.get(Team, team_id)
    if not team:
        await call.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    tournament = await session.get(Tournament, team.tournament_id)
    players = await session.scalars(select(Player).where(Player.team_id == team.id))
    players = list(players)
    player_usernames = []
    for player in players:
        player_usernames.append(f"{player.nickname} (ID –≤ –∏–≥—Ä–µ: {player.game_id})")

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–ø–∏—Ç–∞–Ω–∞
    captain = await session.scalar(select(User).where(User.telegram_id == team.captain_tg_id))
    if captain and captain.username:
        captain_info = f"@{captain.username}"
    elif captain and captain.full_name:
        captain_info = captain.full_name
    else:
        captain_info = str(team.captain_tg_id)

    text = (
        f"–ö–æ–º–∞–Ω–¥–∞: <b>{team.team_name}</b>\n"
        f"–¢—É—Ä–Ω–∏—Ä: {tournament.name if tournament else team.tournament_id}\n"
        f"–ö–∞–ø–∏—Ç–∞–Ω: {captain_info}\n"
        f"–£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(player_usernames)}"
    )
    await call.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=team_request_kb(team.id)
    )
    
@router.callback_query(F.data.regexp(r"^(de)?activate_tournament_\d+$"))
async def toggle_tournament_status(call: CallbackQuery, session: AsyncSession):
    data = call.data
    tournament_id = int(data.split("_")[-1])
    tournament = await session.get(Tournament, tournament_id)
    user = await session.scalar(
        select(User).where(User.telegram_id == call.from_user.id)
    )
    # –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞
    if not tournament or not (
        user.role == UserRole.SUPER_ADMIN or tournament.created_by == user.id
    ):
        await call.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞!", show_alert=True)
        return

    if data.startswith("deactivate"):
        tournament.is_active = False
        await session.commit()
        await call.answer("–¢—É—Ä–Ω–∏—Ä –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!", show_alert=True)
    else:
        tournament.is_active = True
        await session.commit()
        await call.answer("–¢—É—Ä–Ω–∏—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!", show_alert=True)

    # –û–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await call.message.edit_reply_markup(
        reply_markup=tournament_status_kb(tournament_id, tournament.is_active)
    )
    
@router.callback_query(F.data.startswith("preview_team_"))
async def preview_team(call: CallbackQuery, session: AsyncSession):
    team_id = int(call.data.split("_")[2])
    team = await session.get(Team, team_id)
    tournament = await session.get(Tournament, team.tournament_id)
    players = await session.scalars(select(Player).where(Player.team_id == team.id))
    players = list(players)
    player_usernames = []
    for player in players:
        player_usernames.append(f"{player.nickname} (ID –≤ –∏–≥—Ä–µ: {player.game_id})")

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–ø–∏—Ç–∞–Ω–∞
    captain = await session.scalar(select(User).where(User.telegram_id == team.captain_tg_id))
    if captain and captain.username:
        captain_info = f"@{captain.username}"
    elif captain and captain.full_name:
        captain_info = captain.full_name
    else:
        captain_info = str(team.captain_tg_id)

    # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–æ –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
    if team.logo_path:
        try:
            logo = FSInputFile(team.logo_path)
            await call.message.answer_photo(
                photo=logo,
                caption=f"–õ–æ–≥–æ—Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã: {team.team_name}"
            )
        except Exception:
            await call.message.answer("‚ö†Ô∏è –õ–æ–≥–æ—Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    # 2. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ –∏ –∫–Ω–æ–ø–∫–∏
    text = (
        f"–ö–æ–º–∞–Ω–¥–∞: <b>{team.team_name}</b>\n"
        f"–¢—É—Ä–Ω–∏—Ä: {tournament.name if tournament else team.tournament_id}\n"
        f"–ö–∞–ø–∏—Ç–∞–Ω: {captain_info}\n"
        f"–£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(player_usernames)}"
    )
    await call.message.answer(
        text,
        parse_mode="HTML",
        reply_markup=team_request_kb(team.id)
    )
    await call.answer()
    
@router.message(F.text.startswith("/get_user"))
async def get_user_by_id(message: Message, session: AsyncSession):
    try:
        parts = message.text.strip().split()
        if len(parts) != 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /get_user <tg_id>")
            return
        tg_id = int(parts[1])
    except Exception:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")
        return

    user = await session.scalar(select(User).where(User.telegram_id == tg_id))
    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    username = user.username or f"(–Ω–µ—Ç username, id: {user.telegram_id})"
    await message.answer(f"Username: @{username}" if user.username else f"Username –Ω–µ –∑–∞–¥–∞–Ω. Telegram ID: {user.telegram_id}")
    


from app.filters.admin import SuperAdminFilter

@router.message(SuperAdminFilter(), F.text.startswith("/ban"))
async def ban_user(message: Message, session: AsyncSession):
    try:
        parts = message.text.split(maxsplit=2)
        user_id = int(parts[1])
        reason = parts[2] if len(parts) > 2 else "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã"
        await add_to_blacklist(session, user_id, message.from_user.id, reason)
        logger.info(f"SuperAdmin {message.from_user.id} banned user {user_id}. Reason: {reason}")
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
    except Exception as e:
        logger.error(f"Failed to ban user. Message: {message.text}. Error: {e}", exc_info=True)
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /ban <user_id> <–ø—Ä–∏—á–∏–Ω–∞>")

@router.message(SuperAdminFilter(), F.text.startswith("/unban"))
async def unban_user(message: Message, session: AsyncSession):
    try:
        user_id = int(message.text.split()[1])
        await remove_from_blacklist(session, user_id)
        logger.info(f"SuperAdmin {message.from_user.id} unbanned user {user_id}")
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω –∏–∑ –±–ª–µ–∫-–ª–∏—Å—Ç–∞.")
    except Exception as e:
        logger.error(f"Failed to unban user. Message: {message.text}. Error: {e}", exc_info=True)
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /unban <user_id>")

@router.message(AdminFilter(), F.text.startswith("/team_win"))
async def set_team_winner(message: Message, session: AsyncSession, state: FSMContext):
    await state.clear()  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã
    parts = message.text.strip().split(maxsplit=1)
    if len(parts) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /team_win <–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–æ–º–∞–Ω–¥—ã>")
        return
    team_name = parts[1].strip()
    user = await session.scalar(select(User).where(User.telegram_id == message.from_user.id))
    team = await session.scalar(
        select(Team)
        .where(Team.team_name.ilike(team_name))
        .where(Team.status == TeamStatus.APPROVED)
    )
    if not team:
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞.")
        return
    # –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –∏–ª–∏ –∞–¥–º–∏–Ω-–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Ç—É—Ä–Ω–∏—Ä–∞
    tournament = await session.get(Tournament, team.tournament_id)
    if not (user.role == UserRole.SUPER_ADMIN or (user.role == UserRole.ADMIN and tournament.created_by == user.id)):
        await message.answer("üö´ –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    if team.progress_status != ProgressStatus.IN_PROGRESS:
        await message.answer("‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥—ã —É–∂–µ –∏–∑–º–µ–Ω—ë–Ω.")
        return
    team.progress_status = ProgressStatus.WINNER
    await session.commit()
    logger.info(f"User {message.from_user.id} set team '{team.team_name}' as WINNER")
    await message.answer(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ <b>{team.team_name}</b> –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å.", parse_mode="HTML")

@router.message(AdminFilter(), F.text.startswith("/team_lose"))
async def set_team_loser(message: Message, session: AsyncSession, state: FSMContext):
    await state.clear()
    parts = message.text.strip().split(maxsplit=1)
    if len(parts) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /team_lose <–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–æ–º–∞–Ω–¥—ã>")
        return
    team_name = parts[1].strip()
    user = await session.scalar(select(User).where(User.telegram_id == message.from_user.id))
    team = await session.scalar(
        select(Team)
        .where(Team.team_name.ilike(team_name))
        .where(Team.status == TeamStatus.APPROVED)
    )
    if not team:
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞.")
        return
    tournament = await session.get(Tournament, team.tournament_id)
    if not (user.role == UserRole.SUPER_ADMIN or (user.role == UserRole.ADMIN and tournament.created_by == user.id)):
        await message.answer("üö´ –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    if team.progress_status != ProgressStatus.IN_PROGRESS:
        await message.answer("‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥—ã —É–∂–µ –∏–∑–º–µ–Ω—ë–Ω.")
        return
    team.progress_status = ProgressStatus.LOSER
    await session.commit()
    logger.info(f"User {message.from_user.id} set team '{team.team_name}' as LOSER")
    await message.answer(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ <b>{team.team_name}</b> –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∞—è.", parse_mode="HTML")



PLAY_OFF_GROUP_URL = "https://t.me/+DTMg_J80D2RhM2Ni"        # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Å—Å—ã–ª–∫—É



@router.callback_query(F.data == "notifications_menu")
async def show_notifications_menu(call: CallbackQuery):
    await call.message.edit_text(
        "–ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–æ–∫:",
        reply_markup=notifications_menu_kb()
    )


@router.callback_query(F.data == "notify_all_users")
async def notify_all_users_start(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    await state.set_state(Broadcast.TEXT)
    
@router.message(Broadcast.TEXT)
async def broadcast_get_text(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    await message.answer("–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–µ–π—á–∞—Å. –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'.")
    await state.set_state(Broadcast.PHOTO)
    
@router.message(Broadcast.PHOTO, F.photo)
async def broadcast_get_photo(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    data = await state.get_data()
    text = data["text"]
    users = await session.scalars(select(User))
    users = list(users)
    sent = 0
    failed = 0
    wait_msg = await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ...")
    photo_id = message.photo[-1].file_id
    for user in users:
        try:
            await bot.send_photo(user.telegram_id, photo=photo_id, caption=text)
            sent += 1
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
            failed += 1
    await wait_msg.delete()
    await message.answer(
        f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {sent}\n‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}",
        reply_markup=back_to_admin_kb()
    )
    await state.clear()

@router.message(Broadcast.PHOTO, MessageTypeFilter())
async def broadcast_no_photo(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    if message.text and message.text.lower() == "–Ω–µ—Ç":
        data = await state.get_data()
        text = data["text"]
        users = await session.scalars(select(User))
        users = list(users)
        sent = 0
        failed = 0
        wait_msg = await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ...")
        for user in users:
            try:
                await bot.send_message(user.telegram_id, text)
                sent += 1
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
                failed += 1
        await wait_msg.delete()
        await message.answer(
            f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {sent}\n‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}",
            reply_markup=back_to_admin_kb()
        )
        await state.clear()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'.")

@router.callback_query(F.data == "notify_winners")
async def notify_winners_cb(call: CallbackQuery, session: AsyncSession, bot: Bot):
    wait_msg = await call.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º –Ω–∞—á–∞—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ...")
    await call.message.delete()
    teams = await session.scalars(
        select(Team).where(
            Team.progress_status == ProgressStatus.WINNER,
            Team.status == TeamStatus.APPROVED
        )
    )
    teams = list(teams)
    sent = 0
    failed = 0
    for team in teams:
        captain = await session.scalar(select(User).where(User.telegram_id == team.captain_tg_id))
        if not captain:
            failed += 1
            continue
        try:
            await bot.send_message(
                captain.telegram_id,
                (
                    "üëç | <b>–û—Ç–ª–∏—á–Ω–∞—è –∏–≥—Ä–∞!</b> –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–¥–æ–ª–µ–ª–∞ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é —Ç—É—Ä–Ω–∏—Ä–∞ –ø–æ Mobile Legends: Bang Bang –æ—Ç Donatov.net.\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç–∞–¥–∏—é —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è ‚Äî <b>¬´–ì—Ä—É–ø–ø–æ–≤–æ–π —ç—Ç–∞–ø¬ª</b>.\n\n"
                    "üìÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —ç—Ç–∞–ø–∞:</b> –° 9 –ø–æ 12 –∏—é–Ω—è –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ.\n\n"
                    "–ü–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —ç—Ç–∞–ø–∞ —Ç—É—Ä–Ω–∏—Ä–∞.\n\n"
                    "–ì–æ—Ç–æ–≤—å—Ç–µ—Å—å ‚Äî –¥–∞–ª—å—à–µ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –∂–∞—Ä—á–µ! üî•üëç"
                ),
                reply_markup=group_invite_kb(PLAY_OFF_GROUP_URL, "–ì—Ä—É–ø–ø–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞"),
                parse_mode="HTML"
)
            sent += 1
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–Ω—É {captain.telegram_id}: {e}")
            failed += 1
    await wait_msg.delete()
    await call.message.answer(
        f"–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {sent}\n"
        f"‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}",
        reply_markup=back_to_admin_kb()
    )


@router.callback_query(F.data == "notify_losers")
async def notify_losers_cb(call: CallbackQuery, session: AsyncSession, bot: Bot):
    wait_msg = await call.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–º –Ω–∞—á–∞—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ...")
    await call.message.delete()
    
    teams = await session.scalars(
        select(Team).where(
            Team.progress_status == ProgressStatus.LOSER,
            Team.status == TeamStatus.APPROVED
        )
    )
    teams = list(teams)
    sent = 0
    failed = 0
    for team in teams:
        captain = await session.scalar(select(User).where(User.telegram_id == team.captain_tg_id))
        if not captain:
            failed += 1
            continue
        try:
            await bot.send_message(
                captain.telegram_id,
                (
                    "–í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é, –Ω–æ —É –≤–∞—Å –µ—Å—Ç—å –µ—â—ë —à–∞–Ω—Å!\n\n"
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º –¥–Ω–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–π —Ç—É—Ä–Ω–∏—Ä–∞ –ø–æ Mobile Legends: Bang Bang –æ—Ç Donatov.net.\n"
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –≤ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø, –Ω–æ —ç—Ç–æ –µ—â—ë –Ω–µ –∫–æ–Ω–µ—Ü.\n\n"
                    "‚è≠ –ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —á–µ—Ç–≤–µ—Ä—Ç–æ–º –¥–Ω–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Å—Ç–æ–∏—Ç—Å—è 8 –∏—é–Ω—è –≤ 19:00 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ë–∏—à–∫–µ–∫–∞ (GMT+6).\n\n"
                    "üî• –í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —á–µ—Ç–≤–µ—Ä—Ç—ã–π –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –¥–µ–Ω—å –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Å–∏–ª—ã –µ—â—ë —Ä–∞–∑!\n\n"
                    "–ü–æ–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –º–∞–∫—Å–∏–º—É–º –∏ –ø–æ–±–æ—Ä–∏—Ç–µ—Å—å –∑–∞ –≤—ã—Ö–æ–¥ –≤ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø!"
                ),
                reply_markup=tournaments_btn_kb(),
                parse_mode="HTML"
            )
            sent += 1
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–Ω—É {captain.telegram_id}: {e}")
            failed += 1
    await wait_msg.delete()
    await call.message.answer(
        f"–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {sent}\n"
        f"‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}",
        reply_markup=back_to_admin_kb()
    )

@router.callback_query(F.data == "notify_inprogress")
async def notify_inprogress_cb(call: CallbackQuery, session: AsyncSession, bot: Bot):
    wait_msg = await call.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∫–æ–º–∞–Ω–¥–∞–º '–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ' –Ω–∞—á–∞—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ...")
    await call.message.delete()
    teams = await session.scalars(
        select(Team).where(
            Team.progress_status == ProgressStatus.IN_PROGRESS,
            Team.status == TeamStatus.APPROVED
        )
    )
    teams = list(teams)
    sent = 0
    failed = 0
    for team in teams:
        captain = await session.scalar(select(User).where(User.telegram_id == team.captain_tg_id))
        if not captain:
            failed += 1
            continue
        try:
            await bot.send_message(
                captain.telegram_id,
                (
                    "–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏, –Ω–æ –µ—â—ë –Ω–µ –≤—Å—ë –ø–æ—Ç–µ—Ä—è–Ω–æ!\n\n"
                    "–í—ã –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ –ø—Ä–æ—à–µ–¥—à–µ–π –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏, –Ω–æ —É –≤–∞—Å –≤—Å—ë –µ—â—ë –µ—Å—Ç—å —à–∞–Ω—Å –ø–æ–±–æ—Ä–æ—Ç—å—Å—è –∑–∞ –º–µ—Å—Ç–æ –≤ —Ç—É—Ä–Ω–∏—Ä–µ –ø–æ Mobile Legends: Bang Bang –æ—Ç Donatov.net.\n\n"
                    "üïπ –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–π –ø—Ä–æ–π–¥—ë—Ç 7 –∏—é–Ω—è –≤ 19:00 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ë–∏—à–∫–µ–∫–∞ (GMT+6).\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ.\n\n"
                    "üëá –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n\n"
                    "üî• –ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–≤–æ—é —Å–∏–ª—É!"
                ),
                reply_markup=tournaments_btn_kb(),
                parse_mode="HTML"
            )
            sent += 1
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–Ω—É {captain.telegram_id}: {e}")
            failed += 1
    await wait_msg.delete()
    await call.message.answer(
        f"–†–∞—Å—Å—ã–ª–∫–∞ –∫–æ–º–∞–Ω–¥–∞–º '–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ' –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {sent}\n"
        f"‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}",
        reply_markup=back_to_admin_kb()
    )
    


@router.message(AdminFilter(), F.text.startswith("/send_teams"))
async def send_approved_teams(message: Message, session: AsyncSession, bot: Bot):
    parts = message.text.strip().split(maxsplit=1)
    if len(parts) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /send_teams <group_chat_id>")
        return
    group_chat_id = parts[1].strip()
    teams = await session.scalars(
        select(Team).where(Team.status == TeamStatus.APPROVED)
    )
    teams = list(teams)
    if not teams:
        await message.answer("–ù–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
        return

    for idx, team in enumerate(teams, 1):
        # –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä
        tournament = await session.get(Tournament, team.tournament_id)
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–ø–∏—Ç–∞–Ω–∞
        captain = await session.scalar(select(User).where(User.telegram_id == team.captain_tg_id))
        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        players = await session.scalars(select(Player).where(Player.team_id == team.id))
        players = list(players)
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        members = []
        for player in players:
            members.append(f"{player.nickname} (ID –≤ –∏–≥—Ä–µ: {player.game_id})")
        members_text = ", ".join(members) if members else "‚Äî"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = (
            f"<b>{idx}. {team.team_name}</b>\n"
            f"<b>–¢—É—Ä–Ω–∏—Ä:</b> {tournament.name if tournament else '-'}\n"
            f"<b>–ö–∞–ø–∏—Ç–∞–Ω:</b> @{captain.username if captain and captain.username else captain.telegram_id if captain else '-'}\n"
            f"<b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b> {members_text}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø, –µ—Å–ª–∏ –µ—Å—Ç—å
        if team.logo_path and os.path.exists(team.logo_path):
            try:
                logo = FSInputFile(team.logo_path)
                await bot.send_photo(
                    group_chat_id,
                    photo=logo,
                    caption=text,
                    parse_mode="HTML"
                )
            except Exception as e:
                await message.answer(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –∫–æ–º–∞–Ω–¥—ã {team.team_name}: {e}")
        else:
            await bot.send_message(
                group_chat_id,
                text,
                parse_mode="HTML"
            )
        await asyncio.sleep(3.1)  # <-- –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏

    await message.answer("–î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É.")
    
@router.message(AdminFilter(), F.text.startswith("/teams_captains"))
async def send_teams_captains(message: Message, session: AsyncSession, bot: Bot):
    parts = message.text.strip().split(maxsplit=1)
    if len(parts) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /teams_captains <group_chat_id>")
        return
    group_chat_id = parts[1].strip()
    teams = await session.scalars(
        select(Team).where(Team.status == TeamStatus.APPROVED)
    )
    teams = list(teams)
    if not teams:
        await message.answer("–ù–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
        return

    lines = []
    for team in teams:
        captain = await session.scalar(select(User).where(User.telegram_id == team.captain_tg_id))
        if captain and captain.username:
            cap = f"@{captain.username}"
        else:
            cap = "–ù–ï–ò–ó–í–ï–°–¢–ù–û"
        lines.append(f"{team.team_name}: {cap}")

    # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥ –Ω–µ —Å–æ—Ç–Ω–∏)
    text = "\n".join(lines)
    try:
        await bot.send_message(group_chat_id, text)
        await message.answer("–°–ø–∏—Å–æ–∫ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        
@router.message(AdminFilter(), F.text.startswith("/check_captains"))
async def check_captains_in_group(message: Message, session: AsyncSession, bot: Bot):
    parts = message.text.strip().split(maxsplit=1)
    if len(parts) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /check_captains <group_chat_id>")
        return
    group_chat_id = parts[1].strip()
    teams = await session.scalars(
        select(Team).where(Team.status == TeamStatus.APPROVED)
    )
    teams = list(teams)
    if not teams:
        await message.answer("–ù–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    captain_ids = set()
    team_captains = {}
    for team in teams:
        captain = await session.scalar(select(User).where(User.telegram_id == team.captain_tg_id))
        if captain:
            captain_ids.add(captain.telegram_id)
            team_captains[captain.telegram_id] = (team.team_name, captain.username)
        else:
            team_captains[team.captain_tg_id] = (team.team_name, None)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ª–∏–º–∏—Ç, –µ—Å–ª–∏ —á–∞—Ç –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π)
    chat_members = set()
    extra_users = []
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–æ–≤ (–µ—Å–ª–∏ —á–∞—Ç –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π), –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ get_chat_member –¥–ª—è –∫–∞–∂–¥–æ–≥–æ id
        admins = await bot.get_chat_administrators(group_chat_id)
        for admin in admins:
            chat_members.add(admin.user.id)
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ (–µ—Å–ª–∏ —á–∞—Ç –Ω–µ –æ–≥—Ä–æ–º–Ω—ã–π)
        # –ï—Å–ª–∏ —á–∞—Ç –±–æ–ª—å—à–æ–π, —ç—Ç–æ—Ç –±–ª–æ–∫ –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –∏ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–ø–∏—Ç–∞–Ω–æ–≤
        # members = await bot.get_chat_members(group_chat_id)  # —Ç–∞–∫–æ–≥–æ –º–µ—Ç–æ–¥–∞ –Ω–µ—Ç, —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ get_chat_member –ø–æ id
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞: {e}")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫—Ç–æ –∏–∑ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —á–∞—Ç–µ
    not_in_group = []
    for cap_id, (team_name, username) in team_captains.items():
        try:
            member = await bot.get_chat_member(group_chat_id, cap_id)
            if member.status in ("left", "kicked"):
                cap = f"@{username}" if username else str(cap_id)
                not_in_group.append(f"{team_name}: {cap}")
        except Exception:
            cap = f"@{username}" if username else str(cap_id)
            not_in_group.append(f"{team_name}: {cap}")

        await asyncio.sleep(0.3)  # —á—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç—å flood control

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫—Ç–æ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–∞–ø–∏—Ç–∞–Ω–æ–º
    # (—Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–∏ –∞–¥–º–∏–Ω–æ–≤, –µ—Å–ª–∏ —á–∞—Ç –±–æ–ª—å—à–æ–π)
    for user_id in chat_members:
        if user_id not in captain_ids:
            extra_users.append(str(user_id))

    text = ""
    if not_in_group:
        text += "–ö–∞–ø–∏—Ç–∞–Ω—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —á–∞—Ç–µ:\n" + "\n".join(not_in_group) + "\n\n"
    else:
        text += "–í—Å–µ –∫–∞–ø–∏—Ç–∞–Ω—ã —Å–æ—Å—Ç–æ—è—Ç –≤ —á–∞—Ç–µ!\n\n"

    if extra_users:
        text += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —á–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∫–∞–ø–∏—Ç–∞–Ω–∞–º–∏ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (user_id):\n" + "\n".join(extra_users)
    else:
        text += "–í —á–∞—Ç–µ –Ω–µ—Ç –ª–∏—à–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å—Ä–µ–¥–∏ –∞–¥–º–∏–Ω–æ–≤."

    await message.answer(text)