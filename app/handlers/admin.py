from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from datetime import datetime
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, delete
import uuid
from app.database import crud
from app.services.validators import is_admin
from app.filters.admin import AdminFilter
from app.states import CreateTournament
from app.services.file_handling import save_file
import logging
import os

from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.database.db import Tournament, Game
from app.keyboards.admin import (
    admin_main_menu,
    tournaments_management_kb,
    tournament_actions_kb,
    confirm_action_kb,
    back_to_admin_kb
)

router = Router()
logger = logging.getLogger(__name__)

# –ì–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω-–º–µ–Ω—é
@router.message(F.text == "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message):
    await message.answer("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_main_menu())
    
@router.callback_query(F.data == "stats")
async def show_stats(call: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    stats = await crud.get_statistics(session)
    text = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users']}\n"
        f"üèÜ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤: {stats['active_tournaments']}\n"
        f"üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: {stats['teams']}"
    )
    await call.message.edit_text(text, reply_markup=back_to_admin_kb())
    
@router.callback_query(F.data == "back_to_admin")
async def back_to_admin(call: CallbackQuery):
    await call.message.edit_text("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_main_menu())

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏
@router.callback_query(F.data == "manage_tournaments")
async def manage_tournaments(call: CallbackQuery, session: AsyncSession):
    tournaments = await session.scalars(select(Tournament))
    await call.message.edit_text(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏:", 
        reply_markup=tournaments_management_kb(tournaments)
    )


    
# –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
@router.callback_query(F.data == "create_tournament")
async def start_creation(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ - –≤—ã–±–æ—Ä –∏–≥—Ä—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä
        games = await session.scalars(select(Game))
        if not games:
            await call.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä! –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏–≥—Ä—ã.", show_alert=True)
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–≥—Ä–∞–º–∏
        builder = InlineKeyboardBuilder()
        for game in games:
            builder.button(
                text=game.name, 
                callback_data=f"admin_select_game_{game.id}"  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å
            )
        builder.adjust(1)
        
        await call.message.answer("üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=builder.as_markup())
        await state.set_state(CreateTournament.SELECT_GAME)
        logger.info(f"User {call.from_user.id} started tournament creation")

    except Exception as e:
        logger.error(f"Error in start_creation: {e}")
        await call.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)

@router.callback_query(F.data.startswith("admin_select_game_"), CreateTournament.SELECT_GAME)
async def select_game(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–≥—Ä—ã –∏–∑ callback_data
        game_id = int(call.data.split("_")[3])
        logger.debug(f"Selected game ID: {game_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
        game = await session.get(Game, game_id)
        if not game:
            await call.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        await state.update_data(game_id=game_id)
        await call.message.delete()
        await call.message.answer(
            f"üéÆ –ò–≥—Ä–∞: <b>{game.name}</b>\nüè∑ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:", 
            parse_mode="HTML"
        )
        await state.set_state(CreateTournament.NAME)
        logger.info(f"Game {game_id} selected, waiting for name")

    except Exception as e:
        logger.error(f"Error in select_game: {e}")
        await call.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã!", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
@router.message(CreateTournament.NAME)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üåÑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ª–æ–≥–æ—Ç–∏–ø (—Ñ–æ—Ç–æ):")
    await state.set_state(CreateTournament.LOGO)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–∞
@router.message(CreateTournament.LOGO, F.photo)
async def process_logo(message: Message, state: FSMContext, bot: Bot):
    file_id = message.photo[-1].file_id
    file_path = await save_file(bot, file_id, "tournaments/logos")
    await state.update_data(logo_path=file_path)
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú):")
    await state.set_state(CreateTournament.START_DATE)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
@router.message(CreateTournament.START_DATE)
async def process_date(message: Message, state: FSMContext):
    try:
        date = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        await state.update_data(start_date=date)
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        await state.set_state(CreateTournament.DESCRIPTION)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ü—Ä–∏–º–µ—Ä: 01.01.2025 14:00")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
@router.message(CreateTournament.DESCRIPTION)
async def process_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç (PDF):")
    await state.set_state(CreateTournament.REGULATIONS)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞
@router.message(CreateTournament.REGULATIONS, F.document)
async def finish_creation(message: Message, state: FSMContext, bot: Bot, session: AsyncSession):
    if message.document.mime_type != "application/pdf":
        return await message.answer("‚ùå –¢–æ–ª—å–∫–æ PDF-—Ñ–∞–π–ª—ã!")
    
    file_path = await save_file(bot, message.document.file_id, "tournaments/regulations")
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º —Ç—É—Ä–Ω–∏—Ä
    tournament = Tournament(
        game_id=data['game_id'],
        name=data['name'],
        logo_path=data['logo_path'],
        start_date=data['start_date'],
        description=data['description'],
        regulations_path=file_path,
        is_active=True
    )
    
    session.add(tournament)
    await session.commit()
    
    await message.answer(
        f"‚úÖ –¢—É—Ä–Ω–∏—Ä <b>{data['name']}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
        f"–î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞: {data['start_date'].strftime('%d.%m.%Y %H:%M')}",
        parse_mode="HTML"
    )
    await state.clear()
    
@router.callback_query(F.data.startswith("edit_tournament_"))
async def show_tournament_details(call: CallbackQuery, session: AsyncSession):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–µ"""
    tournament_id = int(call.data.split("_")[2])
    tournament = await session.get(Tournament, tournament_id)
    
    if not tournament:
        await call.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—É—é –∏–≥—Ä—É
    game = await session.get(Game, tournament.game_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = (
        f"üèÜ <b>{tournament.name}</b>\n\n"
        f"üéÆ –ò–≥—Ä–∞: {game.name if game else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"üïí –î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞: {tournament.start_date.strftime('%d.%m.%Y %H:%M')}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {tournament.description}\n"
        f"üîÑ –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω ‚úÖ' if tournament.is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω ‚ùå'}"
    )

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø
        logo = FSInputFile(tournament.logo_path)
        await call.message.answer_photo(
            photo=logo,
            caption=text,
            parse_mode="HTML"
        )
    except Exception as e:
        await call.message.answer("‚ö†Ô∏è –õ–æ–≥–æ—Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        await call.message.answer(text, parse_mode="HTML")

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–≥–ª–∞–º–µ–Ω—Ç
        regulations = FSInputFile(tournament.regulations_path)
        await call.message.answer_document(
            document=regulations,
            caption="üìÑ –†–µ–≥–ª–∞–º–µ–Ω—Ç —Ç—É—Ä–Ω–∏—Ä–∞"
        )
    except Exception as e:
        await call.message.answer("‚ö†Ô∏è –†–µ–≥–ª–∞–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    await call.message.answer(
        "–î–µ–π—Å—Ç–≤–∏—è —Å —Ç—É—Ä–Ω–∏—Ä–æ–º:",
        reply_markup=tournament_actions_kb(tournament_id)
    )
    
@router.callback_query(F.data.startswith("delete_tournament_"))
async def delete_tournament(call: CallbackQuery, session: AsyncSession):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ —Å —Ñ–∞–π–ª–∞–º–∏"""
    tournament_id = int(call.data.split("_")[2])
    tournament = await session.get(Tournament, tournament_id)
    
    if not tournament:
        await call.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
    import os
    if os.path.exists(tournament.logo_path):
        os.remove(tournament.logo_path)
    if os.path.exists(tournament.regulations_path):
        os.remove(tournament.regulations_path)
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
    await session.delete(tournament)
    await session.commit()
    
    await call.message.edit_text("‚úÖ –¢—É—Ä–Ω–∏—Ä –∏ –≤—Å–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")
    
@router.callback_query(F.data == "back_to_tournaments")
async def back_to_tournaments_list(call: CallbackQuery, session: AsyncSession):
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        await call.message.delete()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤
        tournaments = await session.scalars(select(Tournament))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
        await call.message.answer(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏:",
            reply_markup=tournaments_management_kb(tournaments)
        )
    except Exception as e:
        logging.error(f"Back error: {e}")
        await call.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞!")