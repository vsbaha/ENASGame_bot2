from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from app.states import RegisterTeam
from app.services.file_handling import save_file
from app.database import crud
from app.database.db import TournamentStatus, TeamStatus, UserRole
from app.services.notifications import notify_super_admins
from app.states import EditTeam
import os
import re
import logging

logger = logging.getLogger(__name__)
TEAM_APPROVED_CHANNEL_ID = int(os.getenv("TEAM_APPROVED_CHANNEL_ID"))
# –ò–º–ø–æ—Ä—Ç—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä
from app.keyboards.user import (
    games_list_kb,
    tournament_details_kb,
    my_team_actions_kb,
    edit_team_menu_kb,
    main_menu_kb,
    captain_groups_url_kb
    
)
from app.keyboards.admin import team_request_kb, team_request_preview_kb
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.database.db import User, Game, Tournament, GameFormat, Team, Player



router = Router()

@router.message(F.text == "üîç –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã")
async def show_games(message: Message, session: AsyncSession, state: FSMContext):
    await state.clear()
    logger.info(f"User {message.from_user.id} requested active games list")
    games = await session.scalars(select(Game))
    await message.answer(
        "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", 
        reply_markup=games_list_kb(games)
    )

@router.callback_query(F.data.startswith("view_tournament_"))
async def show_tournament_info(call: CallbackQuery, session: AsyncSession):

    """–î–µ—Ç–∞–ª–∏ —Ç—É—Ä–Ω–∏—Ä–∞"""
    tournament_id = int(call.data.split("_")[2])
    logger.info(f"User {call.from_user.id} requested info for tournament {tournament_id}")
    tournament = await session.get(Tournament, tournament_id)
    
    text = (
        f"üèÖ {tournament.name}\n"
        f"üïí –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {tournament.start_date.strftime('%d.%m.%Y %H:%M')}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {tournament.description}"
    )
    
    await call.message.edit_text(
        text, 
        reply_markup=tournament_details_kb(tournament_id)
    )
    
@router.callback_query(F.data.startswith("user_select_game_"))
async def show_formats(call: CallbackQuery, session: AsyncSession, state: FSMContext):
    game_id = int(call.data.split("_")[3])
    formats = await session.scalars(
        select(GameFormat).where(GameFormat.game_id == game_id)
    )
    formats = list(formats)
    if not formats:
        await call.answer("–ù–µ—Ç —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã!", show_alert=True)
        return

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
    builder = InlineKeyboardBuilder()
    for fmt in formats:
        builder.button(
            text=f"{fmt.format_name} (–¥–æ {fmt.max_players_per_team})",
            callback_data=f"user_select_format_{fmt.id}"
        )
    builder.adjust(1)
    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:",
        reply_markup=builder.as_markup()
    )
    await state.update_data(game_id=game_id)

@router.callback_query(F.data.startswith("register_"))
async def start_team_registration(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    tournament_id = int(call.data.split("_")[1])
    logger.info(f"User {call.from_user.id} starts team registration for tournament {tournament_id}")
    tournament = await session.get(Tournament, tournament_id)
    
    if not tournament or not tournament.is_active:
        await call.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", show_alert=True)
        return
    
    await state.update_data(tournament_id=tournament_id)
    await call.message.answer("üè∑ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:")
    await state.set_state(RegisterTeam.TEAM_NAME)



        
@router.callback_query(F.data.startswith("user_select_format_"))
async def show_tournaments_by_format(call: CallbackQuery, session: AsyncSession, state: FSMContext):
    format_id = int(call.data.split("_")[3])
    tournaments = await session.scalars(
        select(Tournament)
        .where(Tournament.format_id == format_id)
        .where(Tournament.is_active == True)
        .where(Tournament.status == TournamentStatus.APPROVED)
    )
    tournaments = list(tournaments)
    if not tournaments:
        await call.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞!", show_alert=True)
        return

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç—É—Ä–Ω–∏—Ä–∞–º–∏
    builder = InlineKeyboardBuilder()
    for t in tournaments:
        builder.button(
            text=t.name,
            callback_data=f"user_view_tournament_{t.id}"
        )
    builder.adjust(1)
    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä:",
        reply_markup=builder.as_markup()
    )
    await state.update_data(format_id=format_id)

@router.callback_query(F.data.startswith("user_view_tournament_"))
async def show_tournament_and_register(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    tournament_id = int(call.data.split("_")[3])
    loading_msg = await call.message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç—É—Ä–Ω–∏—Ä–µ...")

    tournament = await session.get(Tournament, tournament_id)
    if not tournament or not tournament.is_active:
        await loading_msg.delete()
        await call.answer("–¢—É—Ä–Ω–∏—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", show_alert=True)
        return

    # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if tournament.logo_path and os.path.exists(tournament.logo_path):
        try:
            logo = FSInputFile(tournament.logo_path)
            await call.message.answer_photo(
                photo=logo,
                caption=f"–õ–æ–≥–æ—Ç–∏–ø —Ç—É—Ä–Ω–∏—Ä–∞: {tournament.name}"
            )
        except Exception:
            pass

    # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–≥–ª–∞–º–µ–Ω—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
    if tournament.regulations_path and os.path.exists(tournament.regulations_path):
        try:
            regulations = FSInputFile(tournament.regulations_path)
            await call.message.answer_document(
                document=regulations,
                caption="üìÑ –†–µ–≥–ª–∞–º–µ–Ω—Ç —Ç—É—Ä–Ω–∏—Ä–∞"
            )
        except Exception:
            pass

    # 3. –û–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏ ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–∫–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –≤–Ω–∏–∑—É)
    text = (
        f"üèÖ <b>{tournament.name}</b>\n"
        f"üïí –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {tournament.start_date.strftime('%d.%m.%Y %H:%M')}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {tournament.description}\n"
    )

    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data=f"register_{tournament_id}")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_games")
    builder.adjust(1)

    await call.message.answer(
        text,
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )
    await state.update_data(tournament_id=tournament_id)
    await loading_msg.delete()
    
@router.message(F.text == "üë• –ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã")
async def my_teams(message: Message, session: AsyncSession, state: FSMContext):
    await state.clear()
    logger.info(f"User {message.from_user.id} requested their teams")
    user = await session.scalar(select(User).where(User.telegram_id == message.from_user.id))
    if user and user.role == UserRole.SUPER_ADMIN:
        # –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        teams = await session.scalars(
            select(Team).where(Team.status == TeamStatus.APPROVED)
        )
    else:
        # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        teams = await session.scalars(
            select(Team)
            .where(
                ((Team.captain_tg_id == message.from_user.id) |
                 (Team.id.in_(
                    select(Player.team_id).where(Player.user_id == message.from_user.id)
                 )))
                & (Team.status == TeamStatus.APPROVED)
            )
        )
    teams = list(teams)
    if not teams:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–æ–º–∞–Ω–¥.")
        return

    text = "–í–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
    builder = InlineKeyboardBuilder()
    for team in teams:
        is_captain = team.captain_tg_id == message.from_user.id
        builder.button(
            text=f"{team.team_name} {'(–∫–∞–ø–∏—Ç–∞–Ω)' if is_captain else ''}",
            callback_data=f"my_team_{team.id}"
        )
    builder.adjust(2)
    await message.answer(
        text + "\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π:",
        reply_markup=builder.as_markup()
    )

@router.message(RegisterTeam.TEAM_NAME)
async def process_team_name(message: Message, state: FSMContext, session: AsyncSession):
    team_name = message.text.strip()
    forbidden_names = [
        "team falcons", "onic", "team liquid", "team spirit", "insilio"
    ]
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if not team_name or len(team_name) < 5 or len(team_name) > 15:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (–æ—Ç 5 –¥–æ 15 —Å–∏–º–≤–æ–ª–æ–≤).")
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã
    if not re.fullmatch(r"[A-Za-z–ê-–Ø–∞-—è0-9 ]+", team_name):
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã.")
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
    if team_name.lower() in forbidden_names:
        await message.answer("‚ùå –≠—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—Ä–µ—â–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ä–µ–¥–∏ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    exists = await session.scalar(
        select(Team).where(
            (Team.team_name.ilike(team_name)) &
            (Team.status == TeamStatus.APPROVED)
        )
    )
    if exists:
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å—Ä–µ–¥–∏ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return

    await state.update_data(team_name=team_name)
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ª–æ–≥–æ—Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã (—Ñ–æ—Ç–æ):")
    await state.set_state(RegisterTeam.TEAM_LOGO)

@router.message(RegisterTeam.TEAM_LOGO)
async def process_team_logo(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"User {message.from_user.id} uploads team logo")
    if not message.photo:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–∞ –∫–æ–º–∞–Ω–¥—ã.")
        return
    file_id = message.photo[-1].file_id
    file_path = await save_file(bot, file_id, "teams/logos")
    await state.update_data(logo_path=file_path)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (@user1, @user2, ...):\n(–í—ã ‚Äî –∫–∞–ø–∏—Ç–∞–Ω, —Å–µ–±—è –Ω–µ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ)")
    await state.set_state(RegisterTeam.ADD_PLAYERS)

@router.message(RegisterTeam.ADD_PLAYERS)
async def process_players(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    logger.info(f"User {message.from_user.id} enters team players: {message.text}")
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ username"""
    data = await state.get_data()
    tournament = await session.get(Tournament, data['tournament_id'])
    format = await session.get(GameFormat, tournament.format_id)

    usernames = [u.strip().replace("@", "") for u in message.text.split(",") if u.strip()]
    players = []

    # –î–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ 1x1 ‚Äî —Ç–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω, –Ω–µ –ø—Ä–æ—Å–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if format.max_players_per_team == 1:
        players = [message.from_user.id]
    else:
        if not usernames:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: @user1, @user2")
            return
        for username in usernames:
            user = await session.scalar(select(User).where(User.username == username))
            if not user:
                await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—É—Å—Ç—å –æ–Ω —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–µ—Ç –±–æ—Ç—É /start.")
                return
            players.append(user.telegram_id)
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–ø–∏—Ç–∞–Ω–∞ (—Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥—ã)
        players.insert(0, message.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏–≥—Ä–æ–∫–æ–≤
    if len(players) > format.max_players_per_team:
        await message.answer(f"‚ùå –ú–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: {format.max_players_per_team}")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    team_data = {
        "tournament_id": data['tournament_id'],
        "captain_tg_id": message.from_user.id,
        "team_name": data['team_name'],
        "logo_path": data['logo_path']
    }
    team = await crud.create_team(session, team_data)
    await crud.add_players_to_team(session, team.id, players)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤
    creator = await session.get(User, tournament.created_by)
    await notify_super_admins(
        bot=bot,
        text=f"–ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä {tournament.name}!",
        session=session,
        reply_markup=team_request_preview_kb(team.id)
    )

    await message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É —Ç—É—Ä–Ω–∏—Ä–∞ –∏ –∞–¥–º–∏–Ω–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    await state.clear()




@router.callback_query(F.data.startswith("my_team_"))
async def show_my_team(call: CallbackQuery, session: AsyncSession):
    logger.info(f"User {call.from_user.id} requested details for team {call.data}")
    team_id = int(call.data.split("_")[2])
    team = await session.get(Team, team_id)
    if not team:
        await call.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    if team.status == TeamStatus.REJECTED:
        await call.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.", show_alert=True)
        await call.message.delete()
        return

    tournament = await session.get(Tournament, team.tournament_id)
    players = await session.scalars(select(Player).where(Player.team_id == team.id))
    players = list(players)
    player_usernames = []
    for player in players:
        user = await session.scalar(select(User).where(User.telegram_id == player.user_id)) 
        if user:
            player_usernames.append(f"@{user.username or user.full_name or user.telegram_id}")
    is_captain = team.captain_tg_id == call.from_user.id

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    captain = await session.scalar(select(User).where(User.telegram_id == team.captain_tg_id))
    if captain and captain.username:
        captain_info = f"@{captain.username}"
    elif captain and captain.full_name:
        captain_info = captain.full_name
    else:
        captain_info = str(team.captain_tg_id)

    text = (
        f"üèÖ <b>{team.team_name}</b>\n"
        f"–¢—É—Ä–Ω–∏—Ä: <b>{tournament.name if tournament else team.tournament_id}</b>\n"
        f"–ö–∞–ø–∏—Ç–∞–Ω: {captain_info}\n"
        f"–£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(player_usernames)}"
    )

    # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if team.logo_path:
        try:
            logo = FSInputFile(team.logo_path)
            await call.message.answer_photo(
                photo=logo,
                caption=f"–õ–æ–≥–æ—Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã: {team.team_name}"
            )
        except Exception:
            await call.message.answer("‚ö†Ô∏è –õ–æ–≥–æ—Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–≥–ª–∞–º–µ–Ω—Ç —Ç—É—Ä–Ω–∏—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    if tournament and tournament.regulations_path:
        try:
            regulations = FSInputFile(tournament.regulations_path)
            await call.message.answer_document(
                document=regulations,
                caption="üìÑ –†–µ–≥–ª–∞–º–µ–Ω—Ç —Ç—É—Ä–Ω–∏—Ä–∞"
            )
        except Exception:
            await call.message.answer("‚ö†Ô∏è –†–µ–≥–ª–∞–º–µ–Ω—Ç —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    # 3. –û–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏ ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–∫–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –≤–Ω–∏–∑—É)
    await call.message.answer(
        text,
        parse_mode="HTML",
        reply_markup=my_team_actions_kb(team.id, is_captain)
    )

@router.callback_query(F.data == "back_to_games")
async def back_to_games(call: CallbackQuery, session: AsyncSession, state: FSMContext):
    await state.clear()
    games = await session.scalars(select(Game))
    await call.message.edit_text(
        "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:",
        reply_markup=games_list_kb(games)
    )

from aiogram.exceptions import TelegramAPIError

@router.callback_query(F.data.startswith("approve_team_"))
async def approve_team(call: CallbackQuery, session: AsyncSession, bot: Bot):
    logger.info(f"Admin {call.from_user.id} approves team {call.data}")
    team_id = int(call.data.split("_")[2])
    team = await session.get(Team, team_id)
    if not team:
        await call.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    if team.status != TeamStatus.PENDING:
        await call.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!", show_alert=True)
        await call.message.delete()
        return
    team.status = TeamStatus.APPROVED
    await session.commit()
    await call.answer("–ö–æ–º–∞–Ω–¥–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!")
    await call.message.delete()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    players = await session.scalars(select(Player).where(Player.team_id == team.id))
    players = list(players)
    tg_ids = [player.user_id for player in players]

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    for tg_id in tg_ids:
        try:
            await bot.send_message(
                tg_id,
                f"üéâ –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ '{team.team_name}' –æ–¥–æ–±—Ä–µ–Ω–∞ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ! –í—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –∫–æ–º–∞–Ω–¥"
                if tg_id == team.captain_tg_id
                else f"üéâ –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ '{team.team_name}' –æ–¥–æ–±—Ä–µ–Ω–∞ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ!",
                reply_markup=captain_groups_url_kb() if tg_id == team.captain_tg_id else None
            )
        except TelegramAPIError:
            pass

    # --- –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª ---
    tournament = await session.get(Tournament, team.tournament_id)
    captain = await session.scalar(select(User).where(User.telegram_id == team.captain_tg_id))
    captain_username = f"@{captain.username}" if captain and captain.username else captain.full_name if captain else "N/A"
    team_usernames = []
    for player in players:
        user = await session.scalar(select(User).where(User.telegram_id == player.user_id))
        if user:
            team_usernames.append(f"@{user.username}" if user.username else user.full_name or str(user.telegram_id))
    text = (
        f"üèÜ –¢—É—Ä–Ω–∏—Ä: <b>{tournament.name if tournament else team.tournament_id}</b>\n"
        f"üë• –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: <b>{team.team_name}</b>\n"
        f"üëë –ö–∞–ø–∏—Ç–∞–Ω: {captain_username}\n"
        f"–£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(team_usernames)}"
    )
    try:
        if team.logo_path and os.path.exists(team.logo_path):
            logo = FSInputFile(team.logo_path)
            await bot.send_photo(
                TEAM_APPROVED_CHANNEL_ID,
                photo=logo,
                caption=text,
                parse_mode="HTML"
            )
        else:
            await bot.send_message(
                TEAM_APPROVED_CHANNEL_ID,
                text,
                parse_mode="HTML"
            )
    except Exception as e:
        logger.error(f"Failed to send approved team info to channel: {e}", exc_info=True)

@router.callback_query(F.data.startswith("reject_team_"))
async def reject_team(call: CallbackQuery, session: AsyncSession, bot: Bot):
    logger.info(f"Admin {call.from_user.id} rejects team {call.data}")
    team_id = int(call.data.split("_")[2])
    team = await session.get(Team, team_id)
    if not team:
        await call.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –µ—â—ë –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
    if team.status != TeamStatus.PENDING:
        await call.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!", show_alert=True)
        await call.message.delete()
        return
    team.status = TeamStatus.REJECTED
    await session.commit()
    await call.answer("–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    await call.message.delete()
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–Ω—É
    await bot.send_message(
        team.captain_tg_id,
        f"‚ùå –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ '{team.team_name}' –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º —Ç—É—Ä–Ω–∏—Ä–∞."
    )

@router.callback_query(F.data.startswith("delete_team_"))
async def delete_team(call: CallbackQuery, session: AsyncSession):
    logger.info(f"User {call.from_user.id} deletes team {call.data}")
    team_id = int(call.data.split("_")[2])
    team = await session.get(Team, team_id)
    if not team:
        await call.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    if team.captain_tg_id != call.from_user.id:
        await call.answer("–¢–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É!", show_alert=True)
        return
    logo_path = team.logo_path
    if logo_path and not logo_path.startswith("static/"):
        logo_path = os.path.join("static", logo_path)
    if logo_path and os.path.exists(logo_path):
        os.remove(logo_path)
        logger.info(f"–õ–æ–≥–æ—Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª—ë–Ω: {logo_path}")
    await session.delete(team)
    await session.commit()

    # –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
    teams = await session.scalars(
        select(Team)
        .where(
            (Team.captain_tg_id == call.from_user.id) |
            (Team.id.in_(
                select(Player.team_id).where(Player.user_id == call.from_user.id)
            ))
        )
    )
    teams = list(teams)
    if not teams:
        await call.message.edit_text("–ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.\n–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –∫–æ–º–∞–Ω–¥.")
        return

    text = "–ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.\n\n–í–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
    builder = InlineKeyboardBuilder()
    for t in teams:
        is_captain = t.captain_tg_id == call.from_user.id
        builder.button(
            text=f"{t.team_name} {'(–∫–∞–ø–∏—Ç–∞–Ω)' if is_captain else ''}",
            callback_data=f"my_team_{t.id}"
        )
    await call.message.edit_text(
        text + "\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π:",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data == "back_to_my_teams")
async def back_to_my_teams(call: CallbackQuery, session: AsyncSession):
    teams = await session.scalars(
        select(Team)
        .where(
            (Team.captain_tg_id == call.from_user.id) |
            (Team.id.in_(
                select(Player.team_id).where(Player.user_id == call.from_user.id)
            ))
        )
    )
    teams = list(teams)
    if not teams:
        await call.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –∫–æ–º–∞–Ω–¥.")
        return

    text = "–í–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
    builder = InlineKeyboardBuilder()
    for team in teams:
        is_captain = team.captain_tg_id == call.from_user.id
        builder.button(
            text=f"{team.team_name} {'(–∫–∞–ø–∏—Ç–∞–Ω)' if is_captain else ''}",
            callback_data=f"my_team_{team.id}"
        )
    await call.message.edit_text(
        text + "\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π:",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data.regexp(r"^edit_team_\d+$"))
async def edit_team_menu(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    logger.info(f"User {call.from_user.id} opens edit menu for team {call.data}")
    team_id = int(call.data.split("_")[2])
    team = await session.get(Team, team_id)
    if not team or team.captain_tg_id != call.from_user.id:
        await call.answer("–¢–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É!", show_alert=True)
        return
    await state.update_data(team_id=team_id)
    await call.message.edit_text(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=edit_team_menu_kb(team_id)
    )
    await state.set_state(EditTeam.CHOICE)

@router.callback_query(F.data.regexp(r"^edit_team_name_\d+$"))
async def edit_team_name(call: CallbackQuery, state: FSMContext):
    logger.info(f"User {call.from_user.id} wants to edit team name for {call.data}")
    team_id = int(call.data.split("_")[3])
    await state.update_data(team_id=team_id)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:")
    await state.set_state(EditTeam.NAME)

@router.message(EditTeam.NAME)
async def process_edit_team_name(message: Message, state: FSMContext, session: AsyncSession):
    logger.info(f"User {message.from_user.id} edits team name to: {message.text}")
    data = await state.get_data()
    team = await session.get(Team, data["team_id"])
    if not team or team.captain_tg_id != message.from_user.id:
        await message.answer("–¢–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É!")
        await state.clear()
        return
    team.team_name = message.text
    await session.commit()
    await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.clear()
    
@router.callback_query(F.data.regexp(r"^edit_team_logo_\d+$"))
async def edit_team_logo(call: CallbackQuery, state: FSMContext):
    logger.info(f"User {call.from_user.id} wants to edit team logo for {call.data}")
    team_id = int(call.data.split("_")[3])
    await state.update_data(team_id=team_id)
    await call.message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—ã–π –ª–æ–≥–æ—Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã (—Ñ–æ—Ç–æ):")
    await state.set_state(EditTeam.LOGO)

@router.message(EditTeam.LOGO, F.photo)
async def process_edit_team_logo(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    logger.info(f"User {message.from_user.id} uploads new team logo")
    data = await state.get_data()
    team = await session.get(Team, data["team_id"])
    if not team or team.captain_tg_id != message.from_user.id:
        await message.answer("–¢–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É!")
        await state.clear()
        return
    file_id = message.photo[-1].file_id
    file_path = await save_file(bot, file_id, "teams/logos")
    team.logo_path = file_path
    await session.commit()
    await message.answer("–õ–æ–≥–æ—Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª—ë–Ω!")
    await state.clear()
    
@router.callback_query(F.data.regexp(r"^edit_team_players_\d+$"))
async def edit_team_players(call: CallbackQuery, state: FSMContext):
    logger.info(f"User {call.from_user.id} wants to edit team players for {call.data}")
    team_id = int(call.data.split("_")[3])
    await state.update_data(team_id=team_id)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (@user1, @user2, ...):\n(–í—ã ‚Äî –∫–∞–ø–∏—Ç–∞–Ω, —Å–µ–±—è –Ω–µ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ)")
    await state.set_state(EditTeam.PLAYERS)

@router.message(EditTeam.PLAYERS)
async def process_edit_team_players(message: Message, state: FSMContext, session: AsyncSession):
    logger.info(f"User {message.from_user.id} edits team players: {message.text}")
    data = await state.get_data()
    team = await session.get(Team, data["team_id"])
    if not team or team.captain_tg_id != message.from_user.id:
        await message.answer("–¢–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É!")
        await state.clear()
        return
    usernames = [u.strip().replace("@", "") for u in message.text.split(",") if u.strip()]
    if not usernames:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: @user1, @user2")
        return
    players = []
    for username in usernames:
        user = await session.scalar(select(User).where(User.username == username))
        if not user:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—É—Å—Ç—å –æ–Ω —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–µ—Ç –±–æ—Ç—É /start.")
            return
        players.append(user.telegram_id)
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–ø–∏—Ç–∞–Ω–∞
    players.insert(0, message.from_user.id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏–≥—Ä–æ–∫–æ–≤
    tournament = await session.get(Tournament, team.tournament_id)
    format = await session.get(GameFormat, tournament.format_id)
    if len(players) > format.max_players_per_team:
        await message.answer(f"‚ùå –ú–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: {format.max_players_per_team}")
        return
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö
    await session.execute(
        Player.__table__.delete().where(Player.team_id == team.id)
    )
    for tg_id in players:
        player = Player(team_id=team.id, user_id=tg_id)
        session.add(player)
    await session.commit()
    await message.answer("–°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª—ë–Ω!")
    await state.clear()
    
@router.callback_query(F.data == "show_tournaments")
async def show_tournaments_cb(call: CallbackQuery, session: AsyncSession, state: FSMContext):
    await state.clear()
    games = await session.scalars(select(Game))
    await call.message.answer(
        "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:",
        reply_markup=games_list_kb(games)
    )

@router.callback_query(F.data == "check_subscription")
async def check_subscription(call: CallbackQuery):
    logger.info(f"User {call.from_user.id} checked subscription")
    await call.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!", show_alert=True)
    await call.message.delete()
    await call.message.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å!", reply_markup=main_menu_kb())


