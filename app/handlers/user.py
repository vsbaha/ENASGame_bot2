from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, delete
from sqlalchemy.ext.asyncio import AsyncSession
from app.services.file_handling import save_file
from app.database import crud
from app.services.notifications import notify_super_admins
from app.database.db import User, Player, Game, Team, TeamStatus, UserRole, Tournament, TournamentStatus, GameFormat, Team, Player
from app.states import EditTeam, RegisterTeam
from app.filters.message_type_filter import MessageTypeFilter
from app.utils.subscription import check_subscription
import os
import re
import logging

from app.services.file_handling import save_file
from app.keyboards.admin import team_request_preview_kb
from app.database import crud
from sqlalchemy import select

logger = logging.getLogger(__name__)
TEAM_APPROVED_CHANNEL_ID = int(os.getenv("TEAM_APPROVED_CHANNEL_ID"))
# –ò–º–ø–æ—Ä—Ç—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä
from app.keyboards.user import (
    games_list_kb,
    tournament_details_kb,
    my_team_actions_kb,
    edit_team_menu_kb,
    main_menu_kb,
    captain_groups_url_kb,
    confirm_delete_team_kb,
    edit_players_kb,
    subscription_kb
)
from aiogram.utils.keyboard import InlineKeyboardBuilder



router = Router()

@router.message(F.text == "üîç –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã")
async def show_games(message: Message, session: AsyncSession, state: FSMContext):
    await state.clear()
    logger.info(f"User {message.from_user.id} requested active games list")
    games = await session.scalars(select(Game))
    await message.answer(
        "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", 
        reply_markup=games_list_kb(games)
    )

@router.callback_query(F.data.startswith("view_tournament_"))
async def show_tournament_info(call: CallbackQuery, session: AsyncSession):

    """–î–µ—Ç–∞–ª–∏ —Ç—É—Ä–Ω–∏—Ä–∞"""
    tournament_id = int(call.data.split("_")[2])
    logger.info(f"User {call.from_user.id} requested info for tournament {tournament_id}")
    tournament = await session.get(Tournament, tournament_id)
    
    text = (
        f"üèÖ {tournament.name}\n"
        f"üïí –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {tournament.start_date.strftime('%d.%m.%Y %H:%M')}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {tournament.description}"
    )
    
    await call.message.edit_text(
        text, 
        reply_markup=tournament_details_kb(tournament_id)
    )
    
@router.callback_query(F.data.startswith("user_select_game_"))
async def show_formats(call: CallbackQuery, session: AsyncSession, state: FSMContext):
    await state.clear()
    game_id = int(call.data.split("_")[3])
    formats = await session.scalars(
        select(GameFormat).where(GameFormat.game_id == game_id)
    )
    formats = list(formats)
    if not formats:
        await call.answer("–ù–µ—Ç —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã!", show_alert=True)
        return

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
    builder = InlineKeyboardBuilder()
    for fmt in formats:
        builder.button(
            text=f"{fmt.format_name} (–¥–æ {fmt.max_players_per_team})",
            callback_data=f"user_select_format_{fmt.id}"
        )
    builder.adjust(1)
    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:",
        reply_markup=builder.as_markup()
    )
    await state.update_data(game_id=game_id)

@router.callback_query(F.data.startswith("register_"))
async def start_team_registration(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    tournament_id = int(call.data.split("_")[1])
    logger.info(f"User {call.from_user.id} starts team registration for tournament {tournament_id}")
    tournament = await session.get(Tournament, tournament_id)
    
    if not tournament or not tournament.is_active:
        await call.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", show_alert=True)
        return
    await call.message.delete()
    await state.update_data(tournament_id=tournament_id)

    not_subscribed = await check_subscription(call.bot, session, call.from_user.id, tournament_id)
    if not_subscribed:
        channels_list = "\n".join([f"‚Ä¢ {ch}" for ch in not_subscribed])
        text = (
            "‚ùó –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã:\n"
            f"{channels_list}\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</b>."
        )
        await call.message.answer(text, reply_markup=subscription_kb(), parse_mode="HTML")
        return

    # --- –ï—Å–ª–∏ –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é ---
    await call.message.answer("üè∑ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:")
    await state.set_state(RegisterTeam.TEAM_NAME)


@router.callback_query(F.data == "check_subscription")
async def check_subscription_callback(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    tournament_id = data.get("tournament_id")
    not_subscribed = await check_subscription(call.bot, session, call.from_user.id, tournament_id)
    if not_subscribed:
        channels_list = "\n".join([f"‚Ä¢ {ch}" for ch in not_subscribed])
        text = (
            "‚ùó –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã:\n"
            f"{channels_list}\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</b>."
        )
        await call.message.answer(text, reply_markup=subscription_kb(), parse_mode="HTML")
        return
    await call.message.delete()
    await call.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞!")
    await call.message.answer("üè∑ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:")
    await state.set_state(RegisterTeam.TEAM_NAME)
        
@router.callback_query(F.data.startswith("user_select_format_"))
async def show_tournaments_by_format(call: CallbackQuery, session: AsyncSession, state: FSMContext):
    format_id = int(call.data.split("_")[3])
    tournaments = await session.scalars(
        select(Tournament)
        .where(Tournament.format_id == format_id)
        .where(Tournament.is_active == True)
        .where(Tournament.status == TournamentStatus.APPROVED)
    )
    tournaments = list(tournaments)
    if not tournaments:
        await call.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞!", show_alert=True)
        return

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç—É—Ä–Ω–∏—Ä–∞–º–∏
    builder = InlineKeyboardBuilder()
    for t in tournaments:
        builder.button(
            text=t.name,
            callback_data=f"user_view_tournament_{t.id}"
        )
    builder.adjust(1)
    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä:",
        reply_markup=builder.as_markup()
    )
    await state.update_data(format_id=format_id)

@router.callback_query(F.data.startswith("user_view_tournament_"))
async def show_tournament_and_register(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    tournament_id = int(call.data.split("_")[3])
    loading_msg = await call.message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç—É—Ä–Ω–∏—Ä–µ...")

    tournament = await session.get(Tournament, tournament_id)
    if not tournament or not tournament.is_active:
        await loading_msg.delete()
        await call.answer("–¢—É—Ä–Ω–∏—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", show_alert=True)
        return

    # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if tournament.logo_path and os.path.exists(tournament.logo_path):
        try:
            logo = FSInputFile(tournament.logo_path)
            await call.message.answer_photo(
                photo=logo,
                caption=f"–õ–æ–≥–æ—Ç–∏–ø —Ç—É—Ä–Ω–∏—Ä–∞: {tournament.name}"
            )
        except Exception:
            pass

    # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–≥–ª–∞–º–µ–Ω—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
    if tournament.regulations_path and os.path.exists(tournament.regulations_path):
        try:
            regulations = FSInputFile(tournament.regulations_path)
            await call.message.answer_document(
                document=regulations,
                caption="üìÑ –†–µ–≥–ª–∞–º–µ–Ω—Ç —Ç—É—Ä–Ω–∏—Ä–∞"
            )
        except Exception:
            pass

    # 3. –û–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏ ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–∫–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –≤–Ω–∏–∑—É)
    text = (
        f"üèÖ <b>{tournament.name}</b>\n"
        f"üïí –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {tournament.start_date.strftime('%d.%m.%Y %H:%M')}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {tournament.description}\n"
    )

    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data=f"register_{tournament_id}")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_games")
    builder.adjust(1)

    await call.message.answer(
        text,
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )
    await state.update_data(tournament_id=tournament_id)
    await loading_msg.delete()
    
@router.message(F.text == "üë• –ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã")
async def my_teams(message: Message, session: AsyncSession, state: FSMContext):
    await state.clear()
    logger.info(f"User {message.from_user.id} requested their teams")
    user = await session.scalar(select(User).where(User.telegram_id == message.from_user.id))
    if user and user.role == UserRole.SUPER_ADMIN:
        # –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        teams = await session.scalars(
            select(Team).where(Team.status == TeamStatus.APPROVED)
        )
    else:
        # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        teams = await session.scalars(
            select(Team)
            .where(
                (Team.captain_tg_id == message.from_user.id) &
                (Team.status == TeamStatus.APPROVED)
            )
        )
    teams = list(teams)
    if not teams:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–æ–º–∞–Ω–¥.")
        return

    text = "–í–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
    builder = InlineKeyboardBuilder()
    for team in teams:
        is_captain = team.captain_tg_id == message.from_user.id
        builder.button(
            text=f"{team.team_name} {'(–∫–∞–ø–∏—Ç–∞–Ω)' if is_captain else ''}",
            callback_data=f"my_team_{team.id}"
        )
    builder.adjust(2)
    await message.answer(
        text + "\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π:",
        reply_markup=builder.as_markup()
    )


@router.message(RegisterTeam.TEAM_NAME, MessageTypeFilter())
async def process_team_name(message: Message, state: FSMContext, session: AsyncSession):
    team_name = message.text.strip()
    forbidden_names = [
        "team falcons", "onic", "team liquid", "team spirit", "insilio"
    ]
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if not team_name or len(team_name) < 5 or len(team_name) > 15:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (–æ—Ç 5 –¥–æ 15 —Å–∏–º–≤–æ–ª–æ–≤).")
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ–±–µ–ª—ã
    if not re.fullmatch(r"[A-Za-z–ê-–Ø–∞-—è0-9 ]+", team_name):
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ–±–µ–ª—ã.")
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
    if any(forbidden.lower() in team_name.lower() for forbidden in forbidden_names):
        await message.answer("‚ùå –≠—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.")
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
    exists = await session.scalar(
        select(Team).where(
            (Team.team_name.ilike(team_name)) &
            (Team.status == TeamStatus.APPROVED)
        )
    )
    if exists:
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å—Ä–µ–¥–∏ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return

    await state.update_data(team_name=team_name)
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ª–æ–≥–æ—Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã (—Ñ–æ—Ç–æ):")
    await state.set_state(RegisterTeam.TEAM_LOGO)

@router.message(RegisterTeam.TEAM_LOGO, MessageTypeFilter())
async def process_team_logo(message: Message, state: FSMContext, bot: Bot):
    if not message.photo:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–∞ –∫–æ–º–∞–Ω–¥—ã.")
        return
    file_id = message.photo[-1].file_id
    file = await bot.get_file(file_id)
    file_size = file.file_size
    if file_size > 5 * 1024 * 1024:  # 5 MB limit
        await message.answer("‚ùå –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5 –ú–ë.")
        return
    file_path = await save_file(bot, file_id, "teams/logos")
    await state.update_data(logo_path=file_path)
    await message.answer("–°–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ? (–ù–µ —Å—á–∏—Ç–∞—è –∑–∞–º–µ–Ω)")
    await state.set_state(RegisterTeam.PLAYER_COUNT)


@router.message(RegisterTeam.PLAYER_COUNT, MessageTypeFilter())
async def process_player_count(message: Message, state: FSMContext, session: AsyncSession):
    try:
        player_count = int(message.text)
        data = await state.get_data()
        tournament = await session.get(Tournament, data['tournament_id'])
        format = await session.get(GameFormat, tournament.format_id)
        if player_count < format.min_players_per_team or player_count > format.max_players_per_team:
            await message.answer(f"‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç {format.min_players_per_team} –¥–æ {format.max_players_per_team}.")
            return
        await state.update_data(player_count=player_count, current_player=1)
        await message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∏ –∏–≥—Ä–æ–≤–æ–π ID –¥–ª—è –∏–≥—Ä–æ–∫–∞ 1 (–≤–∫–ª—é—á–∞—è –≤–∞—Å) –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∏–∫ | ID\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: PlayerNickname | 12345678\n\n"
            f"–í–Ω–∏–º–∞–Ω–∏–µ: –ü–µ—Ä–≤—ã–º –∏–≥—Ä–æ–∫–æ–º –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –≤—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ."
        )
        await state.set_state(RegisterTeam.PLAYER_INFO)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")


@router.message(RegisterTeam.PLAYER_INFO, MessageTypeFilter())
async def process_player_info(message: Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    current_player = data.get('current_player', 1)
    player_count = data.get('player_count', 0)

    try:
        nickname, game_id = message.text.split('|')
        nickname = nickname.strip()
        game_id = game_id.strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –Ω–∏–∫–∞ –∏ ID
        if len(nickname) < 3 or len(nickname) > 20 or len(game_id) < 3 or len(game_id) > 20:
            await message.answer("‚ùå –î–ª–∏–Ω–∞ –Ω–∏–∫–∞ –∏ ID –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∏–∫–∞ –∏ ID —Å—Ä–µ–¥–∏ —É–∂–µ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        players = data.get('players', [])
        nicknames = {p['nickname'] for p in players}
        game_ids = {p['game_id'] for p in players}
        if nickname in nicknames:
            await message.answer(f"‚ùå –ù–∏–∫–Ω–µ–π–º {nickname} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–º–∞–Ω–¥–µ.")
            return
        if game_id in game_ids:
            await message.answer(f"‚ùå Game ID {game_id} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–º–∞–Ω–¥–µ.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∏–∫–∞ –∏ ID –≤ —Ä–∞–º–∫–∞—Ö —Ç—É—Ä–Ω–∏—Ä–∞
        tournament_id = data['tournament_id']
        existing_player = await session.scalar(
            select(Player).join(Team).where(
                (Team.tournament_id == tournament_id) &
                ((Player.nickname.ilike(nickname)) | (Player.game_id.ilike(game_id)))
            )
        )
        if existing_player:
            await message.answer("‚ùå –ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –Ω–∏–∫–æ–º –∏–ª–∏ ID —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ.")
            return

        is_captain = current_player == 1
        players.append({"nickname": nickname, "game_id": game_id, "is_captain": is_captain})
        await state.update_data(players=players)

        if current_player < player_count:
            await state.update_data(current_player=current_player + 1)
            await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∏ –∏–≥—Ä–æ–≤–æ–π ID –¥–ª—è –∏–≥—Ä–æ–∫–∞ {current_player + 1} –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∏–∫ | ID")
        else:
            await message.answer("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ–Ω—ã? (–¥–∞/–Ω–µ—Ç)")
            await state.set_state(RegisterTeam.ADD_SUBSTITUTES)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∏–∫ | ID")

@router.message(RegisterTeam.ADD_SUBSTITUTES, MessageTypeFilter())
async def process_add_substitutes(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    text = message.text.strip().lower()
    if text in ["–¥–∞", "yes", "–¥", "y"]:
        await state.update_data(current_substitute=1)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∏ –∏–≥—Ä–æ–≤–æ–π ID –¥–ª—è –∑–∞–º–µ–Ω—ã 1 –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∏–∫ | ID")
        await state.set_state(RegisterTeam.SUBSTITUTE_INFO)
    elif text in ["–Ω–µ—Ç", "no", "–Ω", "n"]:
        await finish_team_registration(message, state, session, bot)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")


@router.message(RegisterTeam.SUBSTITUTE_INFO, MessageTypeFilter())
async def process_substitute_info(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    data = await state.get_data()
    current_substitute = data.get('current_substitute', 1)

    try:
        nickname, game_id = message.text.split('|')
        nickname = nickname.strip()
        game_id = game_id.strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –Ω–∏–∫–∞ –∏ ID
        if len(nickname) < 3 or len(nickname) > 20 or len(game_id) < 3 or len(game_id) > 20:
            await message.answer("‚ùå –î–ª–∏–Ω–∞ –Ω–∏–∫–∞ –∏ ID –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏ —É–∂–µ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –∑–∞–º–µ–Ω
        players = data.get('players', [])
        substitutes = data.get('substitutes', [])
        all_nicknames = {p['nickname'] for p in players} | {s['nickname'] for s in substitutes}
        all_game_ids = {p['game_id'] for p in players} | {s['game_id'] for s in substitutes}
        if nickname in all_nicknames:
            await message.answer(f"‚ùå –ù–∏–∫–Ω–µ–π–º {nickname} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å—Ä–µ–¥–∏ –∑–∞–º–µ–Ω.")
            return
        if game_id in all_game_ids:
            await message.answer(f"‚ùå Game ID {game_id} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å—Ä–µ–¥–∏ –∑–∞–º–µ–Ω.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∏–∫–∞ –∏ ID –≤ —Ä–∞–º–∫–∞—Ö —Ç—É—Ä–Ω–∏—Ä–∞
        tournament_id = data['tournament_id']
        existing_player = await session.scalar(
            select(Player).join(Team).where(
                (Team.tournament_id == tournament_id) &
                ((Player.nickname.ilike(nickname)) | (Player.game_id.ilike(game_id)))
            )
        )
        if existing_player:
            await message.answer("‚ùå –ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –Ω–∏–∫–æ–º –∏–ª–∏ ID —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ.")
            return

        substitutes.append({"nickname": nickname, "game_id": game_id})
        await state.update_data(substitutes=substitutes)

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∞–∫—Å–∏–º—É–º 2)
        if current_substitute < 2:
            await state.update_data(current_substitute=current_substitute + 1)
            await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∏ –∏–≥—Ä–æ–≤–æ–π ID –¥–ª—è –∑–∞–º–µ–Ω—ã {current_substitute + 1} –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∏–∫ | ID")
        else:
            await finish_team_registration(message, state, session, bot)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∏–∫ | ID")






async def finish_team_registration(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    data = await state.get_data()
    captain_id = message.from_user.id
    team_data = {
        "tournament_id": data['tournament_id'],
        "captain_tg_id": captain_id,
        "team_name": data['team_name'],
        "logo_path": data['logo_path'],
        "status": TeamStatus.PENDING
    }
    team = await crud.create_team(session, team_data)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    for player in data['players']:
        await crud.add_player_to_team(
            session, 
            team.id, 
            player['nickname'], 
            player['game_id'], 
            False,  # is_substitute
            captain_id  # <-- –≤—Å–µ–≥–¥–∞ Telegram ID –∫–∞–ø–∏—Ç–∞–Ω–∞
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ–Ω—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
    for sub in data.get('substitutes', []):
        await crud.add_player_to_team(
            session, 
            team.id, 
            sub['nickname'], 
            sub['game_id'], 
            True,  # is_substitute
            captain_id  # <-- —Ç–æ–∂–µ Telegram ID –∫–∞–ø–∏—Ç–∞–Ω–∞
        )

    await session.commit()  # –í–∞–∂–Ω–æ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

    await notify_admins_about_new_team(bot, session, team.id)
    await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    await state.clear()

async def notify_admins_about_new_team(bot: Bot, session: AsyncSession, team_id: int):
    admins = await session.scalars(select(User).where(User.role.in_([UserRole.ADMIN, UserRole.SUPER_ADMIN])))
    team = await session.get(Team, team_id)
    tournament = await session.get(Tournament, team.tournament_id)
    
    notification_text = (
        f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥—ã!\n"
        f"–¢—É—Ä–Ω–∏—Ä: {tournament.name}\n"
        f"–ö–æ–º–∞–Ω–¥–∞: {team.team_name}\n"
        f"–ö–∞–ø–∏—Ç–∞–Ω: {team.captain_tg_id}"
    )
    
    for admin in admins:
        try:
            await bot.send_message(
                admin.telegram_id,
                notification_text,
                reply_markup=team_request_preview_kb(team_id)
            )
        except Exception as e:
            logger.error(f"Failed to notify admin {admin.telegram_id}: {e}")




@router.callback_query(F.data.startswith("my_team_"))
async def show_my_team(call: CallbackQuery, session: AsyncSession):
    logger.info(f"User {call.from_user.id} requested details for team {call.data}")
    team_id = int(call.data.split("_")[2])
    team = await session.get(Team, team_id)
    if not team:
        await call.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    if team.status == TeamStatus.REJECTED:
        await call.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.", show_alert=True)
        await call.message.delete()
        return
    not_subscribed = await check_subscription(call.bot, session, call.from_user.id, team.tournament_id)

    tournament = await session.get(Tournament, team.tournament_id)
    players = await session.scalars(select(Player).where(Player.team_id == team.id))
    players = list(players)
    is_captain = team.captain_tg_id == call.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º Telegram-–∫–∞–ø–∏—Ç–∞–Ω–∞
    captain = await session.scalar(select(User).where(User.telegram_id == team.captain_tg_id))
    if captain and captain.username:
        captain_info = f"@{captain.username}"
    elif captain and captain.full_name:
        captain_info = captain.full_name
    else:
        captain_info = str(team.captain_tg_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    players_text = ""
    for idx, player in enumerate(players, 1):
        players_text += f"{idx}. {player.nickname} (ID: {player.game_id})\n"

    text = (
        f"üèÖ <b>{team.team_name}</b>\n"
        f"–¢—É—Ä–Ω–∏—Ä: <b>{tournament.name if tournament else team.tournament_id}</b>\n"
        f"–ö–∞–ø–∏—Ç–∞–Ω: {captain_info}\n"
        f"–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{players_text}"
    )

    # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if team.logo_path:
        try:
            logo = FSInputFile(team.logo_path)
            await call.message.answer_photo(
                photo=logo,
                caption=f"–õ–æ–≥–æ—Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã: {team.team_name}"
            )
        except Exception:
            await call.message.answer("‚ö†Ô∏è –õ–æ–≥–æ—Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–≥–ª–∞–º–µ–Ω—Ç —Ç—É—Ä–Ω–∏—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    if tournament and tournament.regulations_path:
        try:
            regulations = FSInputFile(tournament.regulations_path)
            await call.message.answer_document(
                document=regulations,
                caption="üìÑ –†–µ–≥–ª–∞–º–µ–Ω—Ç —Ç—É—Ä–Ω–∏—Ä–∞"
            )
        except Exception:
            await call.message.answer("‚ö†Ô∏è –†–µ–≥–ª–∞–º–µ–Ω—Ç —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    # 3. –û–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏ ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–∫–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –≤–Ω–∏–∑—É)
    await call.message.answer(
        text,
        parse_mode="HTML",
        reply_markup=my_team_actions_kb(team.id, is_captain)
    )

@router.callback_query(F.data == "back_to_games")
async def back_to_games(call: CallbackQuery, session: AsyncSession, state: FSMContext):
    await state.clear()
    games = await session.scalars(select(Game))
    await call.message.edit_text(
        "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:",
        reply_markup=games_list_kb(games)
    )

from aiogram.exceptions import TelegramAPIError

@router.callback_query(F.data.startswith("approve_team_"))
async def approve_team(call: CallbackQuery, session: AsyncSession, bot: Bot):
    logger.info(f"Admin {call.from_user.id} approves team {call.data}")
    team_id = int(call.data.split("_")[2])
    team = await session.get(Team, team_id)
    if not team:
        await call.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    if team.status != TeamStatus.PENDING:
        await call.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!", show_alert=True)
        await call.message.delete()
        return
    team.status = TeamStatus.APPROVED
    await session.commit()
    await call.answer("–ö–æ–º–∞–Ω–¥–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!")
    await call.message.delete()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    players = await session.scalars(select(Player).where(Player.team_id == team.id))
    players = list(players)
    # –¢–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    try:
        await bot.send_message(
            team.captain_tg_id,
            f"üéâ –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ '{team.team_name}' –æ–¥–æ–±—Ä–µ–Ω–∞ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ! –í—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –∫–æ–º–∞–Ω–¥",
            reply_markup=captain_groups_url_kb()
        )
    except TelegramAPIError:
        pass

    # --- –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª ---
    tournament = await session.get(Tournament, team.tournament_id)
    captain = await session.scalar(select(User).where(User.telegram_id == team.captain_tg_id))
    captain_username = f"@{captain.username}" if captain and captain.username else captain.full_name if captain else "N/A"
    team_usernames = []
    for player in players:
        team_usernames.append(f"{player.nickname} (ID –≤ –∏–≥—Ä–µ: {player.game_id})")
    text = (
        f"üèÜ –¢—É—Ä–Ω–∏—Ä: <b>{tournament.name if tournament else team.tournament_id}</b>\n"
        f"üë• –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: <b>{team.team_name}</b>\n"
        f"üëë –ö–∞–ø–∏—Ç–∞–Ω: {captain_username}\n"
        f"–£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(team_usernames)}"
    )
    try:
        if team.logo_path and os.path.exists(team.logo_path):
            logo = FSInputFile(team.logo_path)
            await bot.send_photo(
                TEAM_APPROVED_CHANNEL_ID,
                photo=logo,
                caption=text,
                parse_mode="HTML"
            )
        else:
            await bot.send_message(
                TEAM_APPROVED_CHANNEL_ID,
                text,
                parse_mode="HTML"
            )
    except Exception as e:
        logger.error(f"Failed to send approved team info to channel: {e}", exc_info=True)

@router.callback_query(F.data.startswith("reject_team_"))
async def reject_team(call: CallbackQuery, session: AsyncSession, bot: Bot):
    logger.info(f"Admin {call.from_user.id} rejects team {call.data}")
    team_id = int(call.data.split("_")[2])
    team = await session.get(Team, team_id)
    if not team:
        await call.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –µ—â—ë –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
    if team.status != TeamStatus.PENDING:
        await call.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!", show_alert=True)
        await call.message.delete()
        return
    team.status = TeamStatus.REJECTED
    await session.commit()
    await call.answer("–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    await call.message.delete()
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–Ω—É
    await bot.send_message(
        team.captain_tg_id,
        f"‚ùå –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ '{team.team_name}' –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º —Ç—É—Ä–Ω–∏—Ä–∞."
    )

@router.callback_query(F.data.startswith("delete_team_"))
async def delete_team(call: CallbackQuery, session: AsyncSession):
    logger.info(f"User {call.from_user.id} wants to delete team {call.data}")
    team_id = int(call.data.split("_")[2])
    team = await session.get(Team, team_id)
    if not team:
        await call.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    if team.captain_tg_id != call.from_user.id:
        await call.answer("–¢–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É!", show_alert=True)
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await call.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É '{team.team_name}'?",
        reply_markup=confirm_delete_team_kb(team_id)
    )
    
@router.callback_query(F.data.startswith("confirm_delete_team_"))
async def confirm_delete_team(call: CallbackQuery, session: AsyncSession):
    team_id = int(call.data.split("_")[3])
    team = await session.get(Team, team_id)
    if not team or team.captain_tg_id != call.from_user.id:
        await call.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã", show_alert=True)
        return

    logo_path = team.logo_path
    if logo_path and not logo_path.startswith("static/"):
        logo_path = os.path.join("static", logo_path)
    if logo_path and os.path.exists(logo_path):
        os.remove(logo_path)
        logger.info(f"–õ–æ–≥–æ—Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª—ë–Ω: {logo_path}")
    await session.delete(team)
    await session.commit()

    await call.answer("–ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞", show_alert=True)
    await call.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞
    # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
    # await my_teams(call.message, session, call.bot.get('state'))

@router.callback_query(F.data == "cancel_delete_team")
async def cancel_delete_team(call: CallbackQuery, session: AsyncSession, state: FSMContext):
    await call.answer("–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await call.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    await my_teams(call.message, session, state)

@router.callback_query(F.data == "back_to_my_teams")
async def back_to_my_teams(call: CallbackQuery, session: AsyncSession):
    teams = await session.scalars(
        select(Team)
        .where(
            Team.captain_tg_id == call.from_user.id
        )
    )
    teams = list(teams)
    if not teams:
        await call.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –∫–æ–º–∞–Ω–¥.")
        return

    text = "–í–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
    builder = InlineKeyboardBuilder()
    for team in teams:
        is_captain = team.captain_tg_id == call.from_user.id
        builder.button(
            text=f"{team.team_name} {'(–∫–∞–ø–∏—Ç–∞–Ω)' if is_captain else ''}",
            callback_data=f"my_team_{team.id}"
        )
    await call.message.edit_text(
        text + "\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π:",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data.regexp(r"^edit_team_\d+$"))
async def edit_team_menu(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    logger.info(f"User {call.from_user.id} opens edit menu for team {call.data}")
    team_id = int(call.data.split("_")[2])
    team = await session.get(Team, team_id)
    if not team or team.captain_tg_id != call.from_user.id:
        await call.answer("–¢–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É!", show_alert=True)
        return
    await state.update_data(team_id=team_id)
    await call.message.edit_text(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=edit_team_menu_kb(team_id)
    )
    await state.set_state(EditTeam.CHOICE)

@router.callback_query(F.data.regexp(r"^edit_team_name_\d+$"))
async def edit_team_name(call: CallbackQuery, state: FSMContext):
    logger.info(f"User {call.from_user.id} wants to edit team name for {call.data}")
    team_id = int(call.data.split("_")[3])
    await state.update_data(team_id=team_id)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:")
    await state.set_state(EditTeam.NAME)

@router.message(EditTeam.NAME, MessageTypeFilter())
async def process_edit_team_name(message: Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    team = await session.get(Team, data["team_id"])
    if not team or team.captain_tg_id != message.from_user.id:
        await message.answer("–¢–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É!")
        await state.clear()
        return

    new_name = message.text.strip()
    forbidden_names = [
        "team falcons", "onic", "team liquid", "team spirit", "insilio"
    ]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if not new_name or len(new_name) < 5 or len(new_name) > 15:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (–æ—Ç 5 –¥–æ 15 —Å–∏–º–≤–æ–ª–æ–≤).")
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ–±–µ–ª—ã
    if not re.fullmatch(r"[A-Za-z–ê-–Ø–∞-—è0-9 ]+", new_name):
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ–±–µ–ª—ã.")
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
    if any(forbidden.lower() in new_name.lower() for forbidden in forbidden_names):
        await message.answer("‚ùå –≠—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –∑–∞–Ω—è—Ç–æ –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ (–∫—Ä–æ–º–µ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã)
    existing_team = await session.scalar(
        select(Team).where(
            (Team.tournament_id == team.tournament_id) &
            (Team.team_name.ilike(new_name)) &
            (Team.id != team.id)
        )
    )
    if existing_team:
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ.")
        return

    team.team_name = new_name
    await session.commit()
    await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!")
    await state.clear()
    
@router.callback_query(F.data.regexp(r"^edit_team_logo_\d+$"))
async def edit_team_logo(call: CallbackQuery, state: FSMContext):
    logger.info(f"User {call.from_user.id} wants to edit team logo for {call.data}")
    team_id = int(call.data.split("_")[3])
    await state.update_data(team_id=team_id)
    await call.message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—ã–π –ª–æ–≥–æ—Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã (—Ñ–æ—Ç–æ):")
    await state.set_state(EditTeam.LOGO)

@router.message(EditTeam.LOGO, F.photo, MessageTypeFilter())
async def process_edit_team_logo(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    logger.info(f"User {message.from_user.id} uploads new team logo")
    data = await state.get_data()
    team = await session.get(Team, data["team_id"])
    if not team or team.captain_tg_id != message.from_user.id:
        await message.answer("–¢–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É!")
        await state.clear()
        return
    if not message.photo:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–∞ –∫–æ–º–∞–Ω–¥—ã.")
        return
    file_id = message.photo[-1].file_id
    file = await bot.get_file(file_id)
    file_size = file.file_size
    if file_size > 5 * 1024 * 1024:  # 5 MB limit
        await message.answer("‚ùå –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5 –ú–ë.")
        return
    file_path = await save_file(bot, file_id, "teams/logos")
    team.logo_path = file_path
    await session.commit()
    await message.answer("–õ–æ–≥–æ—Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª—ë–Ω!")
    await state.clear()
    
@router.callback_query(F.data.regexp(r"^edit_team_players_\d+$"))
async def edit_team_players(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    team_id = int(call.data.split("_")[3])
    team = await session.get(Team, team_id)
    if not team or team.captain_tg_id != call.from_user.id:
        await call.answer("–¢–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É!", show_alert=True)
        return
    players = await session.scalars(select(Player).where(Player.team_id == team.id))
    players = list(players)
    await state.update_data(team_id=team_id)
    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=edit_players_kb(players)
    )
    await state.set_state(EditTeam.PLAYERS)

@router.callback_query(F.data.startswith("edit_player_"))
async def edit_player_start(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    player_id = int(call.data.split("_")[2])
    player = await session.get(Player, player_id)
    if not player:
        await call.answer("–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    await state.update_data(edit_player_id=player_id)
    await call.message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–≥—Ä–æ–∫–∞:\n"
        f"–¢–µ–∫—É—â–∏–π: {player.nickname} | {player.game_id}\n"
        f"–§–æ—Ä–º–∞—Ç: –ù–∏–∫ | ID"
    )
    await state.set_state(EditTeam.EDIT_PLAYER)

@router.message(EditTeam.EDIT_PLAYER, MessageTypeFilter())
async def process_edit_player(message: Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    player_id = data.get("edit_player_id")
    team_id = data.get("team_id")
    player = await session.get(Player, player_id)
    if not player or player.team_id != team_id:
        await message.answer("–û—à–∏–±–∫–∞: –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    try:
        nickname, game_id = message.text.split('|')
        nickname = nickname.strip()
        game_id = game_id.strip()
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∏–∫ | ID")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥–∏ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã
    other_players = await session.scalars(
        select(Player).where(Player.team_id == team_id, Player.id != player_id)
    )
    for p in other_players:
        if p.nickname == nickname:
            await message.answer(f"‚ùå –ù–∏–∫–Ω–µ–π–º {nickname} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–º–∞–Ω–¥–µ.")
            return
        if p.game_id == game_id:
            await message.answer(f"‚ùå Game ID {game_id} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–º–∞–Ω–¥–µ.")
            return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–º–∫–∞—Ö —Ç—É—Ä–Ω–∏—Ä–∞
    team = await session.get(Team, team_id)
    existing_player = await session.scalar(
        select(Player).join(Team).where(
            (Team.tournament_id == team.tournament_id) &
            ((Player.nickname.ilike(nickname)) | (Player.game_id.ilike(game_id))) &
            (Player.id != player_id)
        )
    )
    if existing_player:
        await message.answer("‚ùå –ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –Ω–∏–∫–æ–º –∏–ª–∏ ID —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ.")
        return

    player.nickname = nickname
    player.game_id = game_id
    await session.commit()
    await message.answer("–î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–Ω–æ–≤–∞ —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    players = await session.scalars(select(Player).where(Player.team_id == team_id))
    players = list(players)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=edit_players_kb(players)
    )
    await state.set_state(EditTeam.PLAYERS)

@router.callback_query(F.data == "edit_team_menu")
async def back_to_edit_team_menu(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    team_id = data.get("team_id")
    if not team_id:
        await call.answer("–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    await call.message.edit_text(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=edit_team_menu_kb(team_id)
    )
    await state.set_state(EditTeam.CHOICE)