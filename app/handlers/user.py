from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

# –ò–º–ø–æ—Ä—Ç—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä
from app.keyboards.user import (
    main_menu_kb,
    games_list_kb,  # –ë—ã–ª–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –∏–∑ games_keyboard
    tournaments_list_kb,
    tournament_details_kb
)

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –≤–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
from app.database.db import Game, Tournament

router = Router()

@router.message(F.text == "üîç –¢—É—Ä–Ω–∏—Ä—ã")
async def show_games(message: Message, session: AsyncSession):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä"""
    games = await session.scalars(select(Game))
    await message.answer(
        "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", 
        reply_markup=games_list_kb(games)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
    )

@router.callback_query(F.data.startswith("user_select_game_"))
async def show_tournaments(call: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã"""
    game_id = int(call.data.split("_")[3])
    tournaments = await session.scalars(
        select(Tournament)
        .where(Tournament.game_id == game_id)
        .where(Tournament.is_active == True)
    )
    await call.message.edit_text(
        "üèÜ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã:", 
        reply_markup=tournaments_list_kb(tournaments)
    )

@router.callback_query(F.data.startswith("view_tournament_"))
async def show_tournament_info(call: CallbackQuery, session: AsyncSession):
    """–î–µ—Ç–∞–ª–∏ —Ç—É—Ä–Ω–∏—Ä–∞"""
    tournament_id = int(call.data.split("_")[2])
    tournament = await session.get(Tournament, tournament_id)
    
    text = (
        f"üèÖ {tournament.name}\n"
        f"üïí –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {tournament.start_date.strftime('%d.%m.%Y %H:%M')}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {tournament.description}"
    )
    
    await call.message.edit_text(
        text, 
        reply_markup=tournament_details_kb(tournament_id)
    )
    
@router.callback_query(F.data.startswith("user_select_game_"))
async def show_tournaments(call: CallbackQuery, session: AsyncSession):
    game_id = int(call.data.split("_")[3])
    tournaments = await session.scalars(
        select(Tournament)
        .where(Tournament.game_id == game_id)
        .where(Tournament.is_active == True)
    )
    
    if not tournaments:
        await call.answer("üòû –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã", show_alert=True)
        return
    
    await call.message.edit_text(
        "üèÜ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã:", 
        reply_markup=tournaments_list_kb(tournaments)
    )