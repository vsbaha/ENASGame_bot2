from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from app.states import RegisterTeam
from app.services.file_handling import save_file
from app.database import crud
from app.services.notifications import notify_super_admins
from app.services.validators import validate_team_players

# –ò–º–ø–æ—Ä—Ç—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä
from app.keyboards.user import (
    main_menu_kb,
    games_list_kb,  # –ë—ã–ª–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –∏–∑ games_keyboard
    tournaments_list_kb,
    tournament_details_kb
)
from app.database.db import Game, Tournament



router = Router()

@router.message(F.text == "üîç –¢—É—Ä–Ω–∏—Ä—ã")
async def show_games(message: Message, session: AsyncSession):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä"""
    games = await session.scalars(select(Game))
    await message.answer(
        "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", 
        reply_markup=games_list_kb(games)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
    )

@router.callback_query(F.data.startswith("user_select_game_"))
async def show_tournaments(call: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã"""
    game_id = int(call.data.split("_")[3])
    tournaments = await session.scalars(
        select(Tournament)
        .where(Tournament.game_id == game_id)
        .where(Tournament.is_active == True)
    )
    await call.message.edit_text(
        "üèÜ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã:", 
        reply_markup=tournaments_list_kb(tournaments)
    )

@router.callback_query(F.data.startswith("view_tournament_"))
async def show_tournament_info(call: CallbackQuery, session: AsyncSession):
    """–î–µ—Ç–∞–ª–∏ —Ç—É—Ä–Ω–∏—Ä–∞"""
    tournament_id = int(call.data.split("_")[2])
    tournament = await session.get(Tournament, tournament_id)
    
    text = (
        f"üèÖ {tournament.name}\n"
        f"üïí –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {tournament.start_date.strftime('%d.%m.%Y %H:%M')}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {tournament.description}"
    )
    
    await call.message.edit_text(
        text, 
        reply_markup=tournament_details_kb(tournament_id)
    )
    
@router.callback_query(F.data.startswith("user_select_game_"))
async def show_tournaments(call: CallbackQuery, session: AsyncSession):
    game_id = int(call.data.split("_")[3])
    tournaments = await session.scalars(
        select(Tournament)
        .where(Tournament.game_id == game_id)
        .where(Tournament.is_active == True)
    )
    
    if not tournaments:
        await call.answer("üòû –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã", show_alert=True)
        return
    
    await call.message.edit_text(
        "üèÜ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã:", 
        reply_markup=tournaments_list_kb(tournaments)
    )
    
@router.callback_query(F.data.startswith("register_"))
async def start_team_registration(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã"""
    tournament_id = int(call.data.split("_")[1])
    tournament = await session.get(Tournament, tournament_id)
    
    if not tournament or not tournament.is_active:
        await call.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", show_alert=True)
        return
    
    await state.update_data(tournament_id=tournament_id)
    await call.message.answer("üè∑ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:")
    await state.set_state(RegisterTeam.TEAM_NAME)

@router.message(RegisterTeam.TEAM_NAME)
async def process_team_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
    await state.update_data(team_name=message.text)
    await message.answer("üåÑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ª–æ–≥–æ—Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã (—Ñ–æ—Ç–æ):")
    await state.set_state(RegisterTeam.TEAM_LOGO)

@router.message(RegisterTeam.TEAM_LOGO, F.photo)
async def process_team_logo(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–∞ –∫–æ–º–∞–Ω–¥—ã"""
    file_id = message.photo[-1].file_id
    file_path = await save_file(bot, file_id, "teams/logos")
    await state.update_data(logo_path=file_path)
    await message.answer("üë• –í–≤–µ–¥–∏—Ç–µ ID —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123,456):")
    await state.set_state(RegisterTeam.ADD_PLAYERS)
    
@router.message(RegisterTeam.ADD_PLAYERS)
async def process_players(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤"""
    data = await state.get_data()
    try:
        players = list(map(int, message.text.split(",")))
        if len(players) < 1:
            raise ValueError
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏–≥—Ä—ã
        tournament = await session.get(Tournament, data['tournament_id'])
        is_valid, message = await validate_team_players(
            session=session,
            game_id=tournament.game_id,
            players_count=len(players)
        )
        
        if not is_valid:
            await message.answer(f"‚ùå {message}")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        team_data = {
            "tournament_id": data['tournament_id'],
            "captain_tg_id": message.from_user.id,
            "team_name": data['team_name'],
            "logo_path": data['logo_path']
        }
        team = await crud.create_team(session, team_data)
        await crud.add_players_to_team(session, team.id, players)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await message.answer(
            f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ <b>{data['team_name']}</b> —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n"
            f"ID —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {', '.join(map(str, players))}",
            parse_mode="HTML"
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
        await notify_super_admins(
            bot=bot,
            text=f"–ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä {tournament.name}!"
        )
        
        await state.clear()
        
    except Exception as e:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")